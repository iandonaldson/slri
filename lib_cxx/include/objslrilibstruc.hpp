/* $Id: objslrilibstruc.hpp,v 1.2 2003/09/30 18:08:51 haocl Exp $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the data definition file
 *   'slrilibstruc.asn'.
 */

#ifndef OBJSLRILIBSTRUC_HPP
#define OBJSLRILIBSTRUC_HPP


// generated includes
#include <objslrilibstruc_.hpp>

// generated classes

BEGIN_slri_SCOPE // namespace slri::

class CSLRIValNode : public CSLRIValNode_Base
{
    typedef CSLRIValNode_Base Tparent;
public:
    // constructor
    CSLRIValNode(void);
    // destructor
    ~CSLRIValNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CSLRIValNode(const CSLRIValNode& value);
    CSLRIValNode& operator=(const CSLRIValNode& value);

};



/////////////////// CSLRIValNode inline methods

// constructor
inline
CSLRIValNode::CSLRIValNode(void)
{
}


/////////////////// end of CSLRIValNode inline methods


class CSLRISeq_id : public CSLRISeq_id_Base
{
    typedef CSLRISeq_id_Base Tparent;
public:
    // constructor
    CSLRISeq_id(void);
    // destructor
    ~CSLRISeq_id(void);

private:
    // Prohibit copy constructor and assignment operator
    CSLRISeq_id(const CSLRISeq_id& value);
    CSLRISeq_id& operator=(const CSLRISeq_id& value);

};



/////////////////// CSLRISeq_id inline methods

// constructor
inline
CSLRISeq_id::CSLRISeq_id(void)
{
}


/////////////////// end of CSLRISeq_id inline methods


class CSLRINode : public CSLRINode_Base
{
    typedef CSLRINode_Base Tparent;
public:
    // constructor
    CSLRINode(void);
    // destructor
    ~CSLRINode(void);

private:
    // Prohibit copy constructor and assignment operator
    CSLRINode(const CSLRINode& value);
    CSLRINode& operator=(const CSLRINode& value);

};



/////////////////// CSLRINode inline methods

// constructor
inline
CSLRINode::CSLRINode(void)
{
}


/////////////////// end of CSLRINode inline methods


class CSLRIFasta : public CSLRIFasta_Base
{
    typedef CSLRIFasta_Base Tparent;
public:
    // constructor
    CSLRIFasta(void);
    // destructor
    ~CSLRIFasta(void);

private:
    // Prohibit copy constructor and assignment operator
    CSLRIFasta(const CSLRIFasta& value);
    CSLRIFasta& operator=(const CSLRIFasta& value);

};



/////////////////// CSLRIFasta inline methods

// constructor
inline
CSLRIFasta::CSLRIFasta(void)
{
}


/////////////////// end of CSLRIFasta inline methods


class CSLRIDomain : public CSLRIDomain_Base
{
    typedef CSLRIDomain_Base Tparent;
public:
    // constructor
    CSLRIDomain(void);
    // destructor
    ~CSLRIDomain(void);

private:
    // Prohibit copy constructor and assignment operator
    CSLRIDomain(const CSLRIDomain& value);
    CSLRIDomain& operator=(const CSLRIDomain& value);

};



/////////////////// CSLRIDomain inline methods

// constructor
inline
CSLRIDomain::CSLRIDomain(void)
{
}


/////////////////// end of CSLRIDomain inline methods


class CDTree : public CDTree_Base
{
    typedef CDTree_Base Tparent;
public:
    // constructor
    CDTree(void);
    // destructor
    ~CDTree(void);

private:
    // Prohibit copy constructor and assignment operator
    CDTree(const CDTree& value);
    CDTree& operator=(const CDTree& value);

};



/////////////////// CDTree inline methods

// constructor
inline
CDTree::CDTree(void)
{
}


/////////////////// end of CDTree inline methods


class CDNode : public CDNode_Base
{
    typedef CDNode_Base Tparent;
public:
    // constructor
    CDNode(void);
    // destructor
    ~CDNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CDNode(const CDNode& value);
    CDNode& operator=(const CDNode& value);

};



/////////////////// CDNode inline methods

// constructor
inline
CDNode::CDNode(void)
{
}


/////////////////// end of CDNode inline methods


class CDKey : public CDKey_Base
{
    typedef CDKey_Base Tparent;
public:
    // constructor
    CDKey(void);
    // destructor
    ~CDKey(void);

private:
    // Prohibit copy constructor and assignment operator
    CDKey(const CDKey& value);
    CDKey& operator=(const CDKey& value);

};



/////////////////// CDKey inline methods

// constructor
inline
CDKey::CDKey(void)
{
}


/////////////////// end of CDKey inline methods


class CDData : public CDData_Base
{
    typedef CDData_Base Tparent;
public:
    // constructor
    CDData(void);
    // destructor
    ~CDData(void);

private:
    // Prohibit copy constructor and assignment operator
    CDData(const CDData& value);
    CDData& operator=(const CDData& value);

};



/////////////////// CDData inline methods

// constructor
inline
CDData::CDData(void)
{
}


/////////////////// end of CDData inline methods


END_slri_SCOPE // namespace slri::


/*
* ===========================================================================
*
* $Log: objslrilibstruc.hpp,v $
* Revision 1.2  2003/09/30 18:08:51  haocl
* merged DData, DTree, DNode, DKey into slrilibstruc,
* merge IVector*, IMatrix* into slrilinkset
*
*
* ===========================================================================
*/

#endif // OBJSLRILIBSTRUC_HPP
/* Original file checksum: lines: 329, chars: 5865, CRC32: aa9dfe98 */
