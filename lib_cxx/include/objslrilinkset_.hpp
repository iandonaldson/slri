/* $Id: objslrilinkset_.hpp,v 1.2 2003/09/30 18:08:51 haocl Exp $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the data definition file
 *   'slrilinkset.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

#ifndef OBJSLRILINKSET_BASE_HPP
#define OBJSLRILINKSET_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

#ifndef BEGIN_slri_SCOPE
#  define BEGIN_slri_SCOPE BEGIN_SCOPE(slri)
#  define END_slri_SCOPE END_SCOPE(slri)
#endif
BEGIN_slri_SCOPE // namespace slri::


// forward declarations
class CBLink_set;
class CBLink_set_List;
class CBLink_set_List2;
class CCLink_set;
class CCLink_set_List;
class CCLink_set_List2;
class CFLink_set;
class CFLink_set_List;
class CFLink_set_List2;
class CILink_set;
class CILink_set_List;
class CILink_set_List2;
class CIMatrix;
class CIMatrixList;
class CIVector;
class CLLink_set;
class CLLink_set_List;
class CLLink_set_List2;
class CYLink_set;
class CYLink_set_List;
class CYLink_set_List2;


// generated classes

class CYLink_set_List3_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CYLink_set_List3_Base(void);
    // destructor
    virtual ~CYLink_set_List3_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List2 > > TSet3;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List2 > > TSet3
    bool IsSetSet3(void) const;
    bool CanGetSet3(void) const;
    void ResetSet3(void);
    const TSet3& GetSet3(void) const;
    TSet3& SetSet3(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CYLink_set_List3_Base(const CYLink_set_List3_Base&);
    CYLink_set_List3_Base& operator=(const CYLink_set_List3_Base&);

    // data
    Uint4 m_set_State[1];
    TSet3 m_Set3;
    TId m_Id;
};
class CYLink_set_List2_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CYLink_set_List2_Base(void);
    // destructor
    virtual ~CYLink_set_List2_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List > > TSet2;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List > > TSet2
    bool IsSetSet2(void) const;
    bool CanGetSet2(void) const;
    void ResetSet2(void);
    const TSet2& GetSet2(void) const;
    TSet2& SetSet2(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CYLink_set_List2_Base(const CYLink_set_List2_Base&);
    CYLink_set_List2_Base& operator=(const CYLink_set_List2_Base&);

    // data
    Uint4 m_set_State[1];
    TSet2 m_Set2;
    TId m_Id;
};
class CYLink_set_List_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CYLink_set_List_Base(void);
    // destructor
    virtual ~CYLink_set_List_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set > > TSet1;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set > > TSet1
    bool IsSetSet1(void) const;
    bool CanGetSet1(void) const;
    void ResetSet1(void);
    const TSet1& GetSet1(void) const;
    TSet1& SetSet1(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CYLink_set_List_Base(const CYLink_set_List_Base&);
    CYLink_set_List_Base& operator=(const CYLink_set_List_Base&);

    // data
    Uint4 m_set_State[1];
    TSet1 m_Set1;
    TId m_Id;
};
class CYLink_set_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CYLink_set_Base(void);
    // destructor
    virtual ~CYLink_set_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TNum;
    typedef NCBI_NS_STD::list< int > TUids;
    typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights;

    // getters
    // setters

    // mandatory
    // typedef int TNum
    bool IsSetNum(void) const;
    bool CanGetNum(void) const;
    void ResetNum(void);
    TNum GetNum(void) const;
    void SetNum(const TNum& value);
    TNum& SetNum(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TUids
    bool IsSetUids(void) const;
    bool CanGetUids(void) const;
    void ResetUids(void);
    const TUids& GetUids(void) const;
    TUids& SetUids(void);

    // optional
    // typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights
    bool IsSetWeights(void) const;
    bool CanGetWeights(void) const;
    void ResetWeights(void);
    const TWeights& GetWeights(void) const;
    TWeights& SetWeights(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CYLink_set_Base(const CYLink_set_Base&);
    CYLink_set_Base& operator=(const CYLink_set_Base&);

    // data
    Uint4 m_set_State[1];
    TNum m_Num;
    TUids m_Uids;
    TWeights m_Weights;
};
class CLLink_set_List3_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CLLink_set_List3_Base(void);
    // destructor
    virtual ~CLLink_set_List3_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List2 > > TSet3;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List2 > > TSet3
    bool IsSetSet3(void) const;
    bool CanGetSet3(void) const;
    void ResetSet3(void);
    const TSet3& GetSet3(void) const;
    TSet3& SetSet3(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CLLink_set_List3_Base(const CLLink_set_List3_Base&);
    CLLink_set_List3_Base& operator=(const CLLink_set_List3_Base&);

    // data
    Uint4 m_set_State[1];
    TSet3 m_Set3;
    TId m_Id;
};
class CLLink_set_List2_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CLLink_set_List2_Base(void);
    // destructor
    virtual ~CLLink_set_List2_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List > > TSet2;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List > > TSet2
    bool IsSetSet2(void) const;
    bool CanGetSet2(void) const;
    void ResetSet2(void);
    const TSet2& GetSet2(void) const;
    TSet2& SetSet2(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CLLink_set_List2_Base(const CLLink_set_List2_Base&);
    CLLink_set_List2_Base& operator=(const CLLink_set_List2_Base&);

    // data
    Uint4 m_set_State[1];
    TSet2 m_Set2;
    TId m_Id;
};
class CLLink_set_List_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CLLink_set_List_Base(void);
    // destructor
    virtual ~CLLink_set_List_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set > > TSet1;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set > > TSet1
    bool IsSetSet1(void) const;
    bool CanGetSet1(void) const;
    void ResetSet1(void);
    const TSet1& GetSet1(void) const;
    TSet1& SetSet1(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CLLink_set_List_Base(const CLLink_set_List_Base&);
    CLLink_set_List_Base& operator=(const CLLink_set_List_Base&);

    // data
    Uint4 m_set_State[1];
    TSet1 m_Set1;
    TId m_Id;
};
class CLLink_set_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CLLink_set_Base(void);
    // destructor
    virtual ~CLLink_set_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TNum;
    typedef NCBI_NS_STD::list< int > TUids;
    typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights;

    // getters
    // setters

    // mandatory
    // typedef int TNum
    bool IsSetNum(void) const;
    bool CanGetNum(void) const;
    void ResetNum(void);
    TNum GetNum(void) const;
    void SetNum(const TNum& value);
    TNum& SetNum(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TUids
    bool IsSetUids(void) const;
    bool CanGetUids(void) const;
    void ResetUids(void);
    const TUids& GetUids(void) const;
    TUids& SetUids(void);

    // optional
    // typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights
    bool IsSetWeights(void) const;
    bool CanGetWeights(void) const;
    void ResetWeights(void);
    const TWeights& GetWeights(void) const;
    TWeights& SetWeights(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CLLink_set_Base(const CLLink_set_Base&);
    CLLink_set_Base& operator=(const CLLink_set_Base&);

    // data
    Uint4 m_set_State[1];
    TNum m_Num;
    TUids m_Uids;
    TWeights m_Weights;
};
class CIVectorList_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CIVectorList_Base(void);
    // destructor
    virtual ~CIVectorList_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TId;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIVector > > TIV;

    // getters
    // setters

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIVector > > TIV
    bool IsSetIV(void) const;
    bool CanGetIV(void) const;
    void ResetIV(void);
    const TIV& GetIV(void) const;
    TIV& SetIV(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CIVectorList_Base(const CIVectorList_Base&);
    CIVectorList_Base& operator=(const CIVectorList_Base&);

    // data
    Uint4 m_set_State[1];
    TId m_Id;
    TIV m_IV;
};
class CIVector_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CIVector_Base(void);
    // destructor
    virtual ~CIVector_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TI;
    typedef NCBI_NS_STD::list< int > TV;

    // getters
    // setters

    // mandatory
    // typedef int TI
    bool IsSetI(void) const;
    bool CanGetI(void) const;
    void ResetI(void);
    TI GetI(void) const;
    void SetI(const TI& value);
    TI& SetI(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TV
    bool IsSetV(void) const;
    bool CanGetV(void) const;
    void ResetV(void);
    const TV& GetV(void) const;
    TV& SetV(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CIVector_Base(const CIVector_Base&);
    CIVector_Base& operator=(const CIVector_Base&);

    // data
    Uint4 m_set_State[1];
    TI m_I;
    TV m_V;
};
class CIMatrixListSet_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CIMatrixListSet_Base(void);
    // destructor
    virtual ~CIMatrixListSet_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TId;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrixList > > TIML;

    // getters
    // setters

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrixList > > TIML
    bool IsSetIML(void) const;
    bool CanGetIML(void) const;
    void ResetIML(void);
    const TIML& GetIML(void) const;
    TIML& SetIML(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CIMatrixListSet_Base(const CIMatrixListSet_Base&);
    CIMatrixListSet_Base& operator=(const CIMatrixListSet_Base&);

    // data
    Uint4 m_set_State[1];
    TId m_Id;
    TIML m_IML;
};
class CIMatrixList_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CIMatrixList_Base(void);
    // destructor
    virtual ~CIMatrixList_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TId;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrix > > TIM;

    // getters
    // setters

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrix > > TIM
    bool IsSetIM(void) const;
    bool CanGetIM(void) const;
    void ResetIM(void);
    const TIM& GetIM(void) const;
    TIM& SetIM(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CIMatrixList_Base(const CIMatrixList_Base&);
    CIMatrixList_Base& operator=(const CIMatrixList_Base&);

    // data
    Uint4 m_set_State[1];
    TId m_Id;
    TIM m_IM;
};
class CIMatrix_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CIMatrix_Base(void);
    // destructor
    virtual ~CIMatrix_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TI;
    typedef int TJ;
    typedef NCBI_NS_STD::list< int > TM;

    // getters
    // setters

    // mandatory
    // typedef int TI
    bool IsSetI(void) const;
    bool CanGetI(void) const;
    void ResetI(void);
    TI GetI(void) const;
    void SetI(const TI& value);
    TI& SetI(void);

    // mandatory
    // typedef int TJ
    bool IsSetJ(void) const;
    bool CanGetJ(void) const;
    void ResetJ(void);
    TJ GetJ(void) const;
    void SetJ(const TJ& value);
    TJ& SetJ(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TM
    bool IsSetM(void) const;
    bool CanGetM(void) const;
    void ResetM(void);
    const TM& GetM(void) const;
    TM& SetM(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CIMatrix_Base(const CIMatrix_Base&);
    CIMatrix_Base& operator=(const CIMatrix_Base&);

    // data
    Uint4 m_set_State[1];
    TI m_I;
    TJ m_J;
    TM m_M;
};
class CILink_set_List3_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CILink_set_List3_Base(void);
    // destructor
    virtual ~CILink_set_List3_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List2 > > TSet3;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List2 > > TSet3
    bool IsSetSet3(void) const;
    bool CanGetSet3(void) const;
    void ResetSet3(void);
    const TSet3& GetSet3(void) const;
    TSet3& SetSet3(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CILink_set_List3_Base(const CILink_set_List3_Base&);
    CILink_set_List3_Base& operator=(const CILink_set_List3_Base&);

    // data
    Uint4 m_set_State[1];
    TSet3 m_Set3;
    TId m_Id;
};
class CILink_set_List2_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CILink_set_List2_Base(void);
    // destructor
    virtual ~CILink_set_List2_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List > > TSet2;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List > > TSet2
    bool IsSetSet2(void) const;
    bool CanGetSet2(void) const;
    void ResetSet2(void);
    const TSet2& GetSet2(void) const;
    TSet2& SetSet2(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CILink_set_List2_Base(const CILink_set_List2_Base&);
    CILink_set_List2_Base& operator=(const CILink_set_List2_Base&);

    // data
    Uint4 m_set_State[1];
    TSet2 m_Set2;
    TId m_Id;
};
class CILink_set_List_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CILink_set_List_Base(void);
    // destructor
    virtual ~CILink_set_List_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set > > TSet1;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set > > TSet1
    bool IsSetSet1(void) const;
    bool CanGetSet1(void) const;
    void ResetSet1(void);
    const TSet1& GetSet1(void) const;
    TSet1& SetSet1(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CILink_set_List_Base(const CILink_set_List_Base&);
    CILink_set_List_Base& operator=(const CILink_set_List_Base&);

    // data
    Uint4 m_set_State[1];
    TSet1 m_Set1;
    TId m_Id;
};
class CILink_set_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CILink_set_Base(void);
    // destructor
    virtual ~CILink_set_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TNum;
    typedef NCBI_NS_STD::list< int > TUids;
    typedef NCBI_NS_STD::list< int > TWeights;

    // getters
    // setters

    // mandatory
    // typedef int TNum
    bool IsSetNum(void) const;
    bool CanGetNum(void) const;
    void ResetNum(void);
    TNum GetNum(void) const;
    void SetNum(const TNum& value);
    TNum& SetNum(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TUids
    bool IsSetUids(void) const;
    bool CanGetUids(void) const;
    void ResetUids(void);
    const TUids& GetUids(void) const;
    TUids& SetUids(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TWeights
    bool IsSetWeights(void) const;
    bool CanGetWeights(void) const;
    void ResetWeights(void);
    const TWeights& GetWeights(void) const;
    TWeights& SetWeights(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CILink_set_Base(const CILink_set_Base&);
    CILink_set_Base& operator=(const CILink_set_Base&);

    // data
    Uint4 m_set_State[1];
    TNum m_Num;
    TUids m_Uids;
    TWeights m_Weights;
};
class CFLink_set_List3_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CFLink_set_List3_Base(void);
    // destructor
    virtual ~CFLink_set_List3_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List2 > > TSet3;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List2 > > TSet3
    bool IsSetSet3(void) const;
    bool CanGetSet3(void) const;
    void ResetSet3(void);
    const TSet3& GetSet3(void) const;
    TSet3& SetSet3(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CFLink_set_List3_Base(const CFLink_set_List3_Base&);
    CFLink_set_List3_Base& operator=(const CFLink_set_List3_Base&);

    // data
    Uint4 m_set_State[1];
    TSet3 m_Set3;
    TId m_Id;
};
class CFLink_set_List2_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CFLink_set_List2_Base(void);
    // destructor
    virtual ~CFLink_set_List2_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List > > TSet2;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List > > TSet2
    bool IsSetSet2(void) const;
    bool CanGetSet2(void) const;
    void ResetSet2(void);
    const TSet2& GetSet2(void) const;
    TSet2& SetSet2(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CFLink_set_List2_Base(const CFLink_set_List2_Base&);
    CFLink_set_List2_Base& operator=(const CFLink_set_List2_Base&);

    // data
    Uint4 m_set_State[1];
    TSet2 m_Set2;
    TId m_Id;
};
class CFLink_set_List_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CFLink_set_List_Base(void);
    // destructor
    virtual ~CFLink_set_List_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set > > TSet1;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set > > TSet1
    bool IsSetSet1(void) const;
    bool CanGetSet1(void) const;
    void ResetSet1(void);
    const TSet1& GetSet1(void) const;
    TSet1& SetSet1(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CFLink_set_List_Base(const CFLink_set_List_Base&);
    CFLink_set_List_Base& operator=(const CFLink_set_List_Base&);

    // data
    Uint4 m_set_State[1];
    TSet1 m_Set1;
    TId m_Id;
};
class CFLink_set_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CFLink_set_Base(void);
    // destructor
    virtual ~CFLink_set_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TNum;
    typedef NCBI_NS_STD::list< int > TUids;
    typedef NCBI_NS_STD::list< double > TWeights;

    // getters
    // setters

    // mandatory
    // typedef int TNum
    bool IsSetNum(void) const;
    bool CanGetNum(void) const;
    void ResetNum(void);
    TNum GetNum(void) const;
    void SetNum(const TNum& value);
    TNum& SetNum(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TUids
    bool IsSetUids(void) const;
    bool CanGetUids(void) const;
    void ResetUids(void);
    const TUids& GetUids(void) const;
    TUids& SetUids(void);

    // optional
    // typedef NCBI_NS_STD::list< double > TWeights
    bool IsSetWeights(void) const;
    bool CanGetWeights(void) const;
    void ResetWeights(void);
    const TWeights& GetWeights(void) const;
    TWeights& SetWeights(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CFLink_set_Base(const CFLink_set_Base&);
    CFLink_set_Base& operator=(const CFLink_set_Base&);

    // data
    Uint4 m_set_State[1];
    TNum m_Num;
    TUids m_Uids;
    TWeights m_Weights;
};
class CCLink_set_List3_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CCLink_set_List3_Base(void);
    // destructor
    virtual ~CCLink_set_List3_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List2 > > TSet3;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List2 > > TSet3
    bool IsSetSet3(void) const;
    bool CanGetSet3(void) const;
    void ResetSet3(void);
    const TSet3& GetSet3(void) const;
    TSet3& SetSet3(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CCLink_set_List3_Base(const CCLink_set_List3_Base&);
    CCLink_set_List3_Base& operator=(const CCLink_set_List3_Base&);

    // data
    Uint4 m_set_State[1];
    TSet3 m_Set3;
    TId m_Id;
};
class CCLink_set_List2_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CCLink_set_List2_Base(void);
    // destructor
    virtual ~CCLink_set_List2_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List > > TSet2;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List > > TSet2
    bool IsSetSet2(void) const;
    bool CanGetSet2(void) const;
    void ResetSet2(void);
    const TSet2& GetSet2(void) const;
    TSet2& SetSet2(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CCLink_set_List2_Base(const CCLink_set_List2_Base&);
    CCLink_set_List2_Base& operator=(const CCLink_set_List2_Base&);

    // data
    Uint4 m_set_State[1];
    TSet2 m_Set2;
    TId m_Id;
};
class CCLink_set_List_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CCLink_set_List_Base(void);
    // destructor
    virtual ~CCLink_set_List_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set > > TSet1;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set > > TSet1
    bool IsSetSet1(void) const;
    bool CanGetSet1(void) const;
    void ResetSet1(void);
    const TSet1& GetSet1(void) const;
    TSet1& SetSet1(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CCLink_set_List_Base(const CCLink_set_List_Base&);
    CCLink_set_List_Base& operator=(const CCLink_set_List_Base&);

    // data
    Uint4 m_set_State[1];
    TSet1 m_Set1;
    TId m_Id;
};
class CCLink_set_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CCLink_set_Base(void);
    // destructor
    virtual ~CCLink_set_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TNum;
    typedef NCBI_NS_STD::list< int > TUids;
    typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights;

    // getters
    // setters

    // mandatory
    // typedef int TNum
    bool IsSetNum(void) const;
    bool CanGetNum(void) const;
    void ResetNum(void);
    TNum GetNum(void) const;
    void SetNum(const TNum& value);
    TNum& SetNum(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TUids
    bool IsSetUids(void) const;
    bool CanGetUids(void) const;
    void ResetUids(void);
    const TUids& GetUids(void) const;
    TUids& SetUids(void);

    // optional
    // typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights
    bool IsSetWeights(void) const;
    bool CanGetWeights(void) const;
    void ResetWeights(void);
    const TWeights& GetWeights(void) const;
    TWeights& SetWeights(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CCLink_set_Base(const CCLink_set_Base&);
    CCLink_set_Base& operator=(const CCLink_set_Base&);

    // data
    Uint4 m_set_State[1];
    TNum m_Num;
    TUids m_Uids;
    TWeights m_Weights;
};
class CBLink_set_List3_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CBLink_set_List3_Base(void);
    // destructor
    virtual ~CBLink_set_List3_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List2 > > TSet3;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List2 > > TSet3
    bool IsSetSet3(void) const;
    bool CanGetSet3(void) const;
    void ResetSet3(void);
    const TSet3& GetSet3(void) const;
    TSet3& SetSet3(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CBLink_set_List3_Base(const CBLink_set_List3_Base&);
    CBLink_set_List3_Base& operator=(const CBLink_set_List3_Base&);

    // data
    Uint4 m_set_State[1];
    TSet3 m_Set3;
    TId m_Id;
};
class CBLink_set_List2_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CBLink_set_List2_Base(void);
    // destructor
    virtual ~CBLink_set_List2_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List > > TSet2;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List > > TSet2
    bool IsSetSet2(void) const;
    bool CanGetSet2(void) const;
    void ResetSet2(void);
    const TSet2& GetSet2(void) const;
    TSet2& SetSet2(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CBLink_set_List2_Base(const CBLink_set_List2_Base&);
    CBLink_set_List2_Base& operator=(const CBLink_set_List2_Base&);

    // data
    Uint4 m_set_State[1];
    TSet2 m_Set2;
    TId m_Id;
};
class CBLink_set_List_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CBLink_set_List_Base(void);
    // destructor
    virtual ~CBLink_set_List_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set > > TSet1;
    typedef int TId;

    // getters
    // setters

    // mandatory
    // typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set > > TSet1
    bool IsSetSet1(void) const;
    bool CanGetSet1(void) const;
    void ResetSet1(void);
    const TSet1& GetSet1(void) const;
    TSet1& SetSet1(void);

    // mandatory
    // typedef int TId
    bool IsSetId(void) const;
    bool CanGetId(void) const;
    void ResetId(void);
    TId GetId(void) const;
    void SetId(const TId& value);
    TId& SetId(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CBLink_set_List_Base(const CBLink_set_List_Base&);
    CBLink_set_List_Base& operator=(const CBLink_set_List_Base&);

    // data
    Uint4 m_set_State[1];
    TSet1 m_Set1;
    TId m_Id;
};
class CBLink_set_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CBLink_set_Base(void);
    // destructor
    virtual ~CBLink_set_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TNum;
    typedef NCBI_NS_STD::list< int > TUids;
    typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights;

    // getters
    // setters

    // mandatory
    // typedef int TNum
    bool IsSetNum(void) const;
    bool CanGetNum(void) const;
    void ResetNum(void);
    TNum GetNum(void) const;
    void SetNum(const TNum& value);
    TNum& SetNum(void);

    // optional
    // typedef NCBI_NS_STD::list< int > TUids
    bool IsSetUids(void) const;
    bool CanGetUids(void) const;
    void ResetUids(void);
    const TUids& GetUids(void) const;
    TUids& SetUids(void);

    // optional
    // typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TWeights
    bool IsSetWeights(void) const;
    bool CanGetWeights(void) const;
    void ResetWeights(void);
    const TWeights& GetWeights(void) const;
    TWeights& SetWeights(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CBLink_set_Base(const CBLink_set_Base&);
    CBLink_set_Base& operator=(const CBLink_set_Base&);

    // data
    Uint4 m_set_State[1];
    TNum m_Num;
    TUids m_Uids;
    TWeights m_Weights;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CYLink_set_List3_Base::IsSetSet3(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CYLink_set_List3_Base::CanGetSet3(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List2 > >& CYLink_set_List3_Base::GetSet3(void) const
{
    return m_Set3;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List2 > >& CYLink_set_List3_Base::SetSet3(void)
{
    m_set_State[0] |= 0x1;
    return m_Set3;
}

inline
bool CYLink_set_List3_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CYLink_set_List3_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CYLink_set_List3_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CYLink_set_List3_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CYLink_set_List3_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CYLink_set_List3_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CYLink_set_List2_Base::IsSetSet2(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CYLink_set_List2_Base::CanGetSet2(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List > >& CYLink_set_List2_Base::GetSet2(void) const
{
    return m_Set2;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set_List > >& CYLink_set_List2_Base::SetSet2(void)
{
    m_set_State[0] |= 0x1;
    return m_Set2;
}

inline
bool CYLink_set_List2_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CYLink_set_List2_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CYLink_set_List2_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CYLink_set_List2_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CYLink_set_List2_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CYLink_set_List2_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CYLink_set_List_Base::IsSetSet1(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CYLink_set_List_Base::CanGetSet1(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set > >& CYLink_set_List_Base::GetSet1(void) const
{
    return m_Set1;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CYLink_set > >& CYLink_set_List_Base::SetSet1(void)
{
    m_set_State[0] |= 0x1;
    return m_Set1;
}

inline
bool CYLink_set_List_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CYLink_set_List_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CYLink_set_List_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CYLink_set_List_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CYLink_set_List_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CYLink_set_List_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CYLink_set_Base::IsSetNum(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CYLink_set_Base::CanGetNum(void) const
{
    return IsSetNum();
}

inline
void CYLink_set_Base::ResetNum(void)
{
    m_Num = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CYLink_set_Base::GetNum(void) const
{
    if (!CanGetNum()) {
        ThrowUnassigned(0);
    }
    return m_Num;
}

inline
void CYLink_set_Base::SetNum(const int& value)
{
    m_Num = value;
    m_set_State[0] |= 0x3;
}

inline
int& CYLink_set_Base::SetNum(void)
{
#ifdef _DEBUG
    if (!IsSetNum()) {
        memset(&m_Num,ms_UnassignedByte,sizeof(m_Num));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Num;
}

inline
bool CYLink_set_Base::IsSetUids(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CYLink_set_Base::CanGetUids(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CYLink_set_Base::GetUids(void) const
{
    return m_Uids;
}

inline
NCBI_NS_STD::list< int >& CYLink_set_Base::SetUids(void)
{
    m_set_State[0] |= 0x4;
    return m_Uids;
}

inline
bool CYLink_set_Base::IsSetWeights(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CYLink_set_Base::CanGetWeights(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_STD::string >& CYLink_set_Base::GetWeights(void) const
{
    return m_Weights;
}

inline
NCBI_NS_STD::list< NCBI_NS_STD::string >& CYLink_set_Base::SetWeights(void)
{
    m_set_State[0] |= 0x10;
    return m_Weights;
}

inline
bool CLLink_set_List3_Base::IsSetSet3(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLLink_set_List3_Base::CanGetSet3(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List2 > >& CLLink_set_List3_Base::GetSet3(void) const
{
    return m_Set3;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List2 > >& CLLink_set_List3_Base::SetSet3(void)
{
    m_set_State[0] |= 0x1;
    return m_Set3;
}

inline
bool CLLink_set_List3_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLLink_set_List3_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CLLink_set_List3_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CLLink_set_List3_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CLLink_set_List3_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CLLink_set_List3_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CLLink_set_List2_Base::IsSetSet2(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLLink_set_List2_Base::CanGetSet2(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List > >& CLLink_set_List2_Base::GetSet2(void) const
{
    return m_Set2;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set_List > >& CLLink_set_List2_Base::SetSet2(void)
{
    m_set_State[0] |= 0x1;
    return m_Set2;
}

inline
bool CLLink_set_List2_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLLink_set_List2_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CLLink_set_List2_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CLLink_set_List2_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CLLink_set_List2_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CLLink_set_List2_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CLLink_set_List_Base::IsSetSet1(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLLink_set_List_Base::CanGetSet1(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set > >& CLLink_set_List_Base::GetSet1(void) const
{
    return m_Set1;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CLLink_set > >& CLLink_set_List_Base::SetSet1(void)
{
    m_set_State[0] |= 0x1;
    return m_Set1;
}

inline
bool CLLink_set_List_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLLink_set_List_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CLLink_set_List_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CLLink_set_List_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CLLink_set_List_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CLLink_set_List_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CLLink_set_Base::IsSetNum(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CLLink_set_Base::CanGetNum(void) const
{
    return IsSetNum();
}

inline
void CLLink_set_Base::ResetNum(void)
{
    m_Num = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CLLink_set_Base::GetNum(void) const
{
    if (!CanGetNum()) {
        ThrowUnassigned(0);
    }
    return m_Num;
}

inline
void CLLink_set_Base::SetNum(const int& value)
{
    m_Num = value;
    m_set_State[0] |= 0x3;
}

inline
int& CLLink_set_Base::SetNum(void)
{
#ifdef _DEBUG
    if (!IsSetNum()) {
        memset(&m_Num,ms_UnassignedByte,sizeof(m_Num));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Num;
}

inline
bool CLLink_set_Base::IsSetUids(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CLLink_set_Base::CanGetUids(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CLLink_set_Base::GetUids(void) const
{
    return m_Uids;
}

inline
NCBI_NS_STD::list< int >& CLLink_set_Base::SetUids(void)
{
    m_set_State[0] |= 0x4;
    return m_Uids;
}

inline
bool CLLink_set_Base::IsSetWeights(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CLLink_set_Base::CanGetWeights(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_STD::string >& CLLink_set_Base::GetWeights(void) const
{
    return m_Weights;
}

inline
NCBI_NS_STD::list< NCBI_NS_STD::string >& CLLink_set_Base::SetWeights(void)
{
    m_set_State[0] |= 0x10;
    return m_Weights;
}

inline
bool CIVectorList_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CIVectorList_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CIVectorList_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CIVectorList_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(0);
    }
    return m_Id;
}

inline
void CIVectorList_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0x3;
}

inline
int& CIVectorList_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Id;
}

inline
bool CIVectorList_Base::IsSetIV(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIVectorList_Base::CanGetIV(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIVector > >& CIVectorList_Base::GetIV(void) const
{
    return m_IV;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIVector > >& CIVectorList_Base::SetIV(void)
{
    m_set_State[0] |= 0x4;
    return m_IV;
}

inline
bool CIVector_Base::IsSetI(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CIVector_Base::CanGetI(void) const
{
    return IsSetI();
}

inline
void CIVector_Base::ResetI(void)
{
    m_I = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CIVector_Base::GetI(void) const
{
    if (!CanGetI()) {
        ThrowUnassigned(0);
    }
    return m_I;
}

inline
void CIVector_Base::SetI(const int& value)
{
    m_I = value;
    m_set_State[0] |= 0x3;
}

inline
int& CIVector_Base::SetI(void)
{
#ifdef _DEBUG
    if (!IsSetI()) {
        memset(&m_I,ms_UnassignedByte,sizeof(m_I));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_I;
}

inline
bool CIVector_Base::IsSetV(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIVector_Base::CanGetV(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CIVector_Base::GetV(void) const
{
    return m_V;
}

inline
NCBI_NS_STD::list< int >& CIVector_Base::SetV(void)
{
    m_set_State[0] |= 0x4;
    return m_V;
}

inline
bool CIMatrixListSet_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CIMatrixListSet_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CIMatrixListSet_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CIMatrixListSet_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(0);
    }
    return m_Id;
}

inline
void CIMatrixListSet_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0x3;
}

inline
int& CIMatrixListSet_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Id;
}

inline
bool CIMatrixListSet_Base::IsSetIML(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIMatrixListSet_Base::CanGetIML(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrixList > >& CIMatrixListSet_Base::GetIML(void) const
{
    return m_IML;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrixList > >& CIMatrixListSet_Base::SetIML(void)
{
    m_set_State[0] |= 0x4;
    return m_IML;
}

inline
bool CIMatrixList_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CIMatrixList_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CIMatrixList_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CIMatrixList_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(0);
    }
    return m_Id;
}

inline
void CIMatrixList_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0x3;
}

inline
int& CIMatrixList_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Id;
}

inline
bool CIMatrixList_Base::IsSetIM(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIMatrixList_Base::CanGetIM(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrix > >& CIMatrixList_Base::GetIM(void) const
{
    return m_IM;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CIMatrix > >& CIMatrixList_Base::SetIM(void)
{
    m_set_State[0] |= 0x4;
    return m_IM;
}

inline
bool CIMatrix_Base::IsSetI(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CIMatrix_Base::CanGetI(void) const
{
    return IsSetI();
}

inline
void CIMatrix_Base::ResetI(void)
{
    m_I = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CIMatrix_Base::GetI(void) const
{
    if (!CanGetI()) {
        ThrowUnassigned(0);
    }
    return m_I;
}

inline
void CIMatrix_Base::SetI(const int& value)
{
    m_I = value;
    m_set_State[0] |= 0x3;
}

inline
int& CIMatrix_Base::SetI(void)
{
#ifdef _DEBUG
    if (!IsSetI()) {
        memset(&m_I,ms_UnassignedByte,sizeof(m_I));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_I;
}

inline
bool CIMatrix_Base::IsSetJ(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CIMatrix_Base::CanGetJ(void) const
{
    return IsSetJ();
}

inline
void CIMatrix_Base::ResetJ(void)
{
    m_J = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CIMatrix_Base::GetJ(void) const
{
    if (!CanGetJ()) {
        ThrowUnassigned(1);
    }
    return m_J;
}

inline
void CIMatrix_Base::SetJ(const int& value)
{
    m_J = value;
    m_set_State[0] |= 0xc;
}

inline
int& CIMatrix_Base::SetJ(void)
{
#ifdef _DEBUG
    if (!IsSetJ()) {
        memset(&m_J,ms_UnassignedByte,sizeof(m_J));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_J;
}

inline
bool CIMatrix_Base::IsSetM(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CIMatrix_Base::CanGetM(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CIMatrix_Base::GetM(void) const
{
    return m_M;
}

inline
NCBI_NS_STD::list< int >& CIMatrix_Base::SetM(void)
{
    m_set_State[0] |= 0x10;
    return m_M;
}

inline
bool CILink_set_List3_Base::IsSetSet3(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CILink_set_List3_Base::CanGetSet3(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List2 > >& CILink_set_List3_Base::GetSet3(void) const
{
    return m_Set3;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List2 > >& CILink_set_List3_Base::SetSet3(void)
{
    m_set_State[0] |= 0x1;
    return m_Set3;
}

inline
bool CILink_set_List3_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CILink_set_List3_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CILink_set_List3_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CILink_set_List3_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CILink_set_List3_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CILink_set_List3_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CILink_set_List2_Base::IsSetSet2(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CILink_set_List2_Base::CanGetSet2(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List > >& CILink_set_List2_Base::GetSet2(void) const
{
    return m_Set2;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set_List > >& CILink_set_List2_Base::SetSet2(void)
{
    m_set_State[0] |= 0x1;
    return m_Set2;
}

inline
bool CILink_set_List2_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CILink_set_List2_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CILink_set_List2_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CILink_set_List2_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CILink_set_List2_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CILink_set_List2_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CILink_set_List_Base::IsSetSet1(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CILink_set_List_Base::CanGetSet1(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set > >& CILink_set_List_Base::GetSet1(void) const
{
    return m_Set1;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CILink_set > >& CILink_set_List_Base::SetSet1(void)
{
    m_set_State[0] |= 0x1;
    return m_Set1;
}

inline
bool CILink_set_List_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CILink_set_List_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CILink_set_List_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CILink_set_List_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CILink_set_List_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CILink_set_List_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CILink_set_Base::IsSetNum(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CILink_set_Base::CanGetNum(void) const
{
    return IsSetNum();
}

inline
void CILink_set_Base::ResetNum(void)
{
    m_Num = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CILink_set_Base::GetNum(void) const
{
    if (!CanGetNum()) {
        ThrowUnassigned(0);
    }
    return m_Num;
}

inline
void CILink_set_Base::SetNum(const int& value)
{
    m_Num = value;
    m_set_State[0] |= 0x3;
}

inline
int& CILink_set_Base::SetNum(void)
{
#ifdef _DEBUG
    if (!IsSetNum()) {
        memset(&m_Num,ms_UnassignedByte,sizeof(m_Num));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Num;
}

inline
bool CILink_set_Base::IsSetUids(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CILink_set_Base::CanGetUids(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CILink_set_Base::GetUids(void) const
{
    return m_Uids;
}

inline
NCBI_NS_STD::list< int >& CILink_set_Base::SetUids(void)
{
    m_set_State[0] |= 0x4;
    return m_Uids;
}

inline
bool CILink_set_Base::IsSetWeights(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CILink_set_Base::CanGetWeights(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CILink_set_Base::GetWeights(void) const
{
    return m_Weights;
}

inline
NCBI_NS_STD::list< int >& CILink_set_Base::SetWeights(void)
{
    m_set_State[0] |= 0x10;
    return m_Weights;
}

inline
bool CFLink_set_List3_Base::IsSetSet3(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CFLink_set_List3_Base::CanGetSet3(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List2 > >& CFLink_set_List3_Base::GetSet3(void) const
{
    return m_Set3;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List2 > >& CFLink_set_List3_Base::SetSet3(void)
{
    m_set_State[0] |= 0x1;
    return m_Set3;
}

inline
bool CFLink_set_List3_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CFLink_set_List3_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CFLink_set_List3_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CFLink_set_List3_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CFLink_set_List3_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CFLink_set_List3_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CFLink_set_List2_Base::IsSetSet2(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CFLink_set_List2_Base::CanGetSet2(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List > >& CFLink_set_List2_Base::GetSet2(void) const
{
    return m_Set2;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set_List > >& CFLink_set_List2_Base::SetSet2(void)
{
    m_set_State[0] |= 0x1;
    return m_Set2;
}

inline
bool CFLink_set_List2_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CFLink_set_List2_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CFLink_set_List2_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CFLink_set_List2_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CFLink_set_List2_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CFLink_set_List2_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CFLink_set_List_Base::IsSetSet1(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CFLink_set_List_Base::CanGetSet1(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set > >& CFLink_set_List_Base::GetSet1(void) const
{
    return m_Set1;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CFLink_set > >& CFLink_set_List_Base::SetSet1(void)
{
    m_set_State[0] |= 0x1;
    return m_Set1;
}

inline
bool CFLink_set_List_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CFLink_set_List_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CFLink_set_List_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CFLink_set_List_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CFLink_set_List_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CFLink_set_List_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CFLink_set_Base::IsSetNum(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CFLink_set_Base::CanGetNum(void) const
{
    return IsSetNum();
}

inline
void CFLink_set_Base::ResetNum(void)
{
    m_Num = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CFLink_set_Base::GetNum(void) const
{
    if (!CanGetNum()) {
        ThrowUnassigned(0);
    }
    return m_Num;
}

inline
void CFLink_set_Base::SetNum(const int& value)
{
    m_Num = value;
    m_set_State[0] |= 0x3;
}

inline
int& CFLink_set_Base::SetNum(void)
{
#ifdef _DEBUG
    if (!IsSetNum()) {
        memset(&m_Num,ms_UnassignedByte,sizeof(m_Num));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Num;
}

inline
bool CFLink_set_Base::IsSetUids(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CFLink_set_Base::CanGetUids(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CFLink_set_Base::GetUids(void) const
{
    return m_Uids;
}

inline
NCBI_NS_STD::list< int >& CFLink_set_Base::SetUids(void)
{
    m_set_State[0] |= 0x4;
    return m_Uids;
}

inline
bool CFLink_set_Base::IsSetWeights(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CFLink_set_Base::CanGetWeights(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< double >& CFLink_set_Base::GetWeights(void) const
{
    return m_Weights;
}

inline
NCBI_NS_STD::list< double >& CFLink_set_Base::SetWeights(void)
{
    m_set_State[0] |= 0x10;
    return m_Weights;
}

inline
bool CCLink_set_List3_Base::IsSetSet3(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CCLink_set_List3_Base::CanGetSet3(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List2 > >& CCLink_set_List3_Base::GetSet3(void) const
{
    return m_Set3;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List2 > >& CCLink_set_List3_Base::SetSet3(void)
{
    m_set_State[0] |= 0x1;
    return m_Set3;
}

inline
bool CCLink_set_List3_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CCLink_set_List3_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CCLink_set_List3_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CCLink_set_List3_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CCLink_set_List3_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CCLink_set_List3_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CCLink_set_List2_Base::IsSetSet2(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CCLink_set_List2_Base::CanGetSet2(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List > >& CCLink_set_List2_Base::GetSet2(void) const
{
    return m_Set2;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set_List > >& CCLink_set_List2_Base::SetSet2(void)
{
    m_set_State[0] |= 0x1;
    return m_Set2;
}

inline
bool CCLink_set_List2_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CCLink_set_List2_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CCLink_set_List2_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CCLink_set_List2_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CCLink_set_List2_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CCLink_set_List2_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CCLink_set_List_Base::IsSetSet1(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CCLink_set_List_Base::CanGetSet1(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set > >& CCLink_set_List_Base::GetSet1(void) const
{
    return m_Set1;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CCLink_set > >& CCLink_set_List_Base::SetSet1(void)
{
    m_set_State[0] |= 0x1;
    return m_Set1;
}

inline
bool CCLink_set_List_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CCLink_set_List_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CCLink_set_List_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CCLink_set_List_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CCLink_set_List_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CCLink_set_List_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CCLink_set_Base::IsSetNum(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CCLink_set_Base::CanGetNum(void) const
{
    return IsSetNum();
}

inline
void CCLink_set_Base::ResetNum(void)
{
    m_Num = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CCLink_set_Base::GetNum(void) const
{
    if (!CanGetNum()) {
        ThrowUnassigned(0);
    }
    return m_Num;
}

inline
void CCLink_set_Base::SetNum(const int& value)
{
    m_Num = value;
    m_set_State[0] |= 0x3;
}

inline
int& CCLink_set_Base::SetNum(void)
{
#ifdef _DEBUG
    if (!IsSetNum()) {
        memset(&m_Num,ms_UnassignedByte,sizeof(m_Num));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Num;
}

inline
bool CCLink_set_Base::IsSetUids(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CCLink_set_Base::CanGetUids(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CCLink_set_Base::GetUids(void) const
{
    return m_Uids;
}

inline
NCBI_NS_STD::list< int >& CCLink_set_Base::SetUids(void)
{
    m_set_State[0] |= 0x4;
    return m_Uids;
}

inline
bool CCLink_set_Base::IsSetWeights(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CCLink_set_Base::CanGetWeights(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_STD::string >& CCLink_set_Base::GetWeights(void) const
{
    return m_Weights;
}

inline
NCBI_NS_STD::list< NCBI_NS_STD::string >& CCLink_set_Base::SetWeights(void)
{
    m_set_State[0] |= 0x10;
    return m_Weights;
}

inline
bool CBLink_set_List3_Base::IsSetSet3(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CBLink_set_List3_Base::CanGetSet3(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List2 > >& CBLink_set_List3_Base::GetSet3(void) const
{
    return m_Set3;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List2 > >& CBLink_set_List3_Base::SetSet3(void)
{
    m_set_State[0] |= 0x1;
    return m_Set3;
}

inline
bool CBLink_set_List3_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CBLink_set_List3_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CBLink_set_List3_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CBLink_set_List3_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CBLink_set_List3_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CBLink_set_List3_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CBLink_set_List2_Base::IsSetSet2(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CBLink_set_List2_Base::CanGetSet2(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List > >& CBLink_set_List2_Base::GetSet2(void) const
{
    return m_Set2;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set_List > >& CBLink_set_List2_Base::SetSet2(void)
{
    m_set_State[0] |= 0x1;
    return m_Set2;
}

inline
bool CBLink_set_List2_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CBLink_set_List2_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CBLink_set_List2_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CBLink_set_List2_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CBLink_set_List2_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CBLink_set_List2_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CBLink_set_List_Base::IsSetSet1(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CBLink_set_List_Base::CanGetSet1(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set > >& CBLink_set_List_Base::GetSet1(void) const
{
    return m_Set1;
}

inline
NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CBLink_set > >& CBLink_set_List_Base::SetSet1(void)
{
    m_set_State[0] |= 0x1;
    return m_Set1;
}

inline
bool CBLink_set_List_Base::IsSetId(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CBLink_set_List_Base::CanGetId(void) const
{
    return IsSetId();
}

inline
void CBLink_set_List_Base::ResetId(void)
{
    m_Id = 0;
    m_set_State[0] &= ~0xc;
}

inline
int CBLink_set_List_Base::GetId(void) const
{
    if (!CanGetId()) {
        ThrowUnassigned(1);
    }
    return m_Id;
}

inline
void CBLink_set_List_Base::SetId(const int& value)
{
    m_Id = value;
    m_set_State[0] |= 0xc;
}

inline
int& CBLink_set_List_Base::SetId(void)
{
#ifdef _DEBUG
    if (!IsSetId()) {
        memset(&m_Id,ms_UnassignedByte,sizeof(m_Id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Id;
}

inline
bool CBLink_set_Base::IsSetNum(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CBLink_set_Base::CanGetNum(void) const
{
    return IsSetNum();
}

inline
void CBLink_set_Base::ResetNum(void)
{
    m_Num = 0;
    m_set_State[0] &= ~0x3;
}

inline
int CBLink_set_Base::GetNum(void) const
{
    if (!CanGetNum()) {
        ThrowUnassigned(0);
    }
    return m_Num;
}

inline
void CBLink_set_Base::SetNum(const int& value)
{
    m_Num = value;
    m_set_State[0] |= 0x3;
}

inline
int& CBLink_set_Base::SetNum(void)
{
#ifdef _DEBUG
    if (!IsSetNum()) {
        memset(&m_Num,ms_UnassignedByte,sizeof(m_Num));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Num;
}

inline
bool CBLink_set_Base::IsSetUids(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CBLink_set_Base::CanGetUids(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< int >& CBLink_set_Base::GetUids(void) const
{
    return m_Uids;
}

inline
NCBI_NS_STD::list< int >& CBLink_set_Base::SetUids(void)
{
    m_set_State[0] |= 0x4;
    return m_Uids;
}

inline
bool CBLink_set_Base::IsSetWeights(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CBLink_set_Base::CanGetWeights(void) const
{
    return true;
}

inline
const NCBI_NS_STD::list< NCBI_NS_STD::string >& CBLink_set_Base::GetWeights(void) const
{
    return m_Weights;
}

inline
NCBI_NS_STD::list< NCBI_NS_STD::string >& CBLink_set_Base::SetWeights(void)
{
    m_set_State[0] |= 0x10;
    return m_Weights;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_slri_SCOPE // namespace slri::


#endif // OBJSLRILINKSET_BASE_HPP
