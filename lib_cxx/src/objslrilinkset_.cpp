/* $Id: objslrilinkset_.cpp,v 1.2 2003/09/30 18:06:17 haocl Exp $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the data definition file
 *   'slrilinkset.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <serial/serialimpl.hpp>

// generated includes
#include <objslrilinkset.hpp>
#include <objslrilinkset.hpp>
BEGIN_slri_SCOPE // namespace slri::


// generated classes

void CYLink_set_List3_Base::ResetSet3(void)
{
    m_Set3.clear();
    m_set_State[0] &= ~0x3;
}

void CYLink_set_List3_Base::Reset(void)
{
    ResetSet3();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("YLink-set-List3", CYLink_set_List3)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set3", m_Set3, STL_list, (STL_CRef, (CLASS, (CYLink_set_List2))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CYLink_set_List3_Base::CYLink_set_List3_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CYLink_set_List3_Base::~CYLink_set_List3_Base(void)
{
}


void CYLink_set_List2_Base::ResetSet2(void)
{
    m_Set2.clear();
    m_set_State[0] &= ~0x3;
}

void CYLink_set_List2_Base::Reset(void)
{
    ResetSet2();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("YLink-set-List2", CYLink_set_List2)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set2", m_Set2, STL_list, (STL_CRef, (CLASS, (CYLink_set_List))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CYLink_set_List2_Base::CYLink_set_List2_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CYLink_set_List2_Base::~CYLink_set_List2_Base(void)
{
}


void CYLink_set_List_Base::ResetSet1(void)
{
    m_Set1.clear();
    m_set_State[0] &= ~0x3;
}

void CYLink_set_List_Base::Reset(void)
{
    ResetSet1();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("YLink-set-List", CYLink_set_List)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set1", m_Set1, STL_list, (STL_CRef, (CLASS, (CYLink_set))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CYLink_set_List_Base::CYLink_set_List_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CYLink_set_List_Base::~CYLink_set_List_Base(void)
{
}


void CYLink_set_Base::ResetUids(void)
{
    m_Uids.clear();
    m_set_State[0] &= ~0xc;
}

void CYLink_set_Base::ResetWeights(void)
{
    m_Weights.clear();
    m_set_State[0] &= ~0x30;
}

void CYLink_set_Base::Reset(void)
{
    ResetNum();
    ResetUids();
    ResetWeights();
}

BEGIN_NAMED_BASE_CLASS_INFO("YLink-set", CYLink_set)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("uids", m_Uids, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("weights", m_Weights, STL_list, (STD, (NCBI_NS_STD::string)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CYLink_set_Base::CYLink_set_Base(void)
    : m_Num(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CYLink_set_Base::~CYLink_set_Base(void)
{
}


void CLLink_set_List3_Base::ResetSet3(void)
{
    m_Set3.clear();
    m_set_State[0] &= ~0x3;
}

void CLLink_set_List3_Base::Reset(void)
{
    ResetSet3();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("LLink-set-List3", CLLink_set_List3)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set3", m_Set3, STL_list, (STL_CRef, (CLASS, (CLLink_set_List2))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CLLink_set_List3_Base::CLLink_set_List3_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CLLink_set_List3_Base::~CLLink_set_List3_Base(void)
{
}


void CLLink_set_List2_Base::ResetSet2(void)
{
    m_Set2.clear();
    m_set_State[0] &= ~0x3;
}

void CLLink_set_List2_Base::Reset(void)
{
    ResetSet2();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("LLink-set-List2", CLLink_set_List2)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set2", m_Set2, STL_list, (STL_CRef, (CLASS, (CLLink_set_List))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CLLink_set_List2_Base::CLLink_set_List2_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CLLink_set_List2_Base::~CLLink_set_List2_Base(void)
{
}


void CLLink_set_List_Base::ResetSet1(void)
{
    m_Set1.clear();
    m_set_State[0] &= ~0x3;
}

void CLLink_set_List_Base::Reset(void)
{
    ResetSet1();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("LLink-set-List", CLLink_set_List)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set1", m_Set1, STL_list, (STL_CRef, (CLASS, (CLLink_set))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CLLink_set_List_Base::CLLink_set_List_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CLLink_set_List_Base::~CLLink_set_List_Base(void)
{
}


void CLLink_set_Base::ResetUids(void)
{
    m_Uids.clear();
    m_set_State[0] &= ~0xc;
}

void CLLink_set_Base::ResetWeights(void)
{
    m_Weights.clear();
    m_set_State[0] &= ~0x30;
}

void CLLink_set_Base::Reset(void)
{
    ResetNum();
    ResetUids();
    ResetWeights();
}

BEGIN_NAMED_BASE_CLASS_INFO("LLink-set", CLLink_set)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("uids", m_Uids, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("weights", m_Weights, STL_list, (STD, (NCBI_NS_STD::string)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CLLink_set_Base::CLLink_set_Base(void)
    : m_Num(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CLLink_set_Base::~CLLink_set_Base(void)
{
}


void CIVectorList_Base::ResetIV(void)
{
    m_IV.clear();
    m_set_State[0] &= ~0xc;
}

void CIVectorList_Base::Reset(void)
{
    ResetId();
    ResetIV();
}

BEGIN_NAMED_BASE_CLASS_INFO("IVectorList", CIVectorList)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("iV", m_IV, STL_list, (STL_CRef, (CLASS, (CIVector))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CIVectorList_Base::CIVectorList_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CIVectorList_Base::~CIVectorList_Base(void)
{
}


void CIVector_Base::ResetV(void)
{
    m_V.clear();
    m_set_State[0] &= ~0xc;
}

void CIVector_Base::Reset(void)
{
    ResetI();
    ResetV();
}

BEGIN_NAMED_BASE_CLASS_INFO("IVector", CIVector)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("i", m_I)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("v", m_V, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CIVector_Base::CIVector_Base(void)
    : m_I(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CIVector_Base::~CIVector_Base(void)
{
}


void CIMatrixListSet_Base::ResetIML(void)
{
    m_IML.clear();
    m_set_State[0] &= ~0xc;
}

void CIMatrixListSet_Base::Reset(void)
{
    ResetId();
    ResetIML();
}

BEGIN_NAMED_BASE_CLASS_INFO("IMatrixListSet", CIMatrixListSet)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("iML", m_IML, STL_list, (STL_CRef, (CLASS, (CIMatrixList))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CIMatrixListSet_Base::CIMatrixListSet_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CIMatrixListSet_Base::~CIMatrixListSet_Base(void)
{
}


void CIMatrixList_Base::ResetIM(void)
{
    m_IM.clear();
    m_set_State[0] &= ~0xc;
}

void CIMatrixList_Base::Reset(void)
{
    ResetId();
    ResetIM();
}

BEGIN_NAMED_BASE_CLASS_INFO("IMatrixList", CIMatrixList)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("iM", m_IM, STL_list, (STL_CRef, (CLASS, (CIMatrix))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CIMatrixList_Base::CIMatrixList_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CIMatrixList_Base::~CIMatrixList_Base(void)
{
}


void CIMatrix_Base::ResetM(void)
{
    m_M.clear();
    m_set_State[0] &= ~0x30;
}

void CIMatrix_Base::Reset(void)
{
    ResetI();
    ResetJ();
    ResetM();
}

BEGIN_NAMED_BASE_CLASS_INFO("IMatrix", CIMatrix)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("i", m_I)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("j", m_J)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("m", m_M, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CIMatrix_Base::CIMatrix_Base(void)
    : m_I(0), m_J(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CIMatrix_Base::~CIMatrix_Base(void)
{
}


void CILink_set_List3_Base::ResetSet3(void)
{
    m_Set3.clear();
    m_set_State[0] &= ~0x3;
}

void CILink_set_List3_Base::Reset(void)
{
    ResetSet3();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("ILink-set-List3", CILink_set_List3)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set3", m_Set3, STL_list, (STL_CRef, (CLASS, (CILink_set_List2))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CILink_set_List3_Base::CILink_set_List3_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CILink_set_List3_Base::~CILink_set_List3_Base(void)
{
}


void CILink_set_List2_Base::ResetSet2(void)
{
    m_Set2.clear();
    m_set_State[0] &= ~0x3;
}

void CILink_set_List2_Base::Reset(void)
{
    ResetSet2();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("ILink-set-List2", CILink_set_List2)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set2", m_Set2, STL_list, (STL_CRef, (CLASS, (CILink_set_List))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CILink_set_List2_Base::CILink_set_List2_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CILink_set_List2_Base::~CILink_set_List2_Base(void)
{
}


void CILink_set_List_Base::ResetSet1(void)
{
    m_Set1.clear();
    m_set_State[0] &= ~0x3;
}

void CILink_set_List_Base::Reset(void)
{
    ResetSet1();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("ILink-set-List", CILink_set_List)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set1", m_Set1, STL_list, (STL_CRef, (CLASS, (CILink_set))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CILink_set_List_Base::CILink_set_List_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CILink_set_List_Base::~CILink_set_List_Base(void)
{
}


void CILink_set_Base::ResetUids(void)
{
    m_Uids.clear();
    m_set_State[0] &= ~0xc;
}

void CILink_set_Base::ResetWeights(void)
{
    m_Weights.clear();
    m_set_State[0] &= ~0x30;
}

void CILink_set_Base::Reset(void)
{
    ResetNum();
    ResetUids();
    ResetWeights();
}

BEGIN_NAMED_BASE_CLASS_INFO("ILink-set", CILink_set)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("uids", m_Uids, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("weights", m_Weights, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CILink_set_Base::CILink_set_Base(void)
    : m_Num(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CILink_set_Base::~CILink_set_Base(void)
{
}


void CFLink_set_List3_Base::ResetSet3(void)
{
    m_Set3.clear();
    m_set_State[0] &= ~0x3;
}

void CFLink_set_List3_Base::Reset(void)
{
    ResetSet3();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("FLink-set-List3", CFLink_set_List3)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set3", m_Set3, STL_list, (STL_CRef, (CLASS, (CFLink_set_List2))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CFLink_set_List3_Base::CFLink_set_List3_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CFLink_set_List3_Base::~CFLink_set_List3_Base(void)
{
}


void CFLink_set_List2_Base::ResetSet2(void)
{
    m_Set2.clear();
    m_set_State[0] &= ~0x3;
}

void CFLink_set_List2_Base::Reset(void)
{
    ResetSet2();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("FLink-set-List2", CFLink_set_List2)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set2", m_Set2, STL_list, (STL_CRef, (CLASS, (CFLink_set_List))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CFLink_set_List2_Base::CFLink_set_List2_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CFLink_set_List2_Base::~CFLink_set_List2_Base(void)
{
}


void CFLink_set_List_Base::ResetSet1(void)
{
    m_Set1.clear();
    m_set_State[0] &= ~0x3;
}

void CFLink_set_List_Base::Reset(void)
{
    ResetSet1();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("FLink-set-List", CFLink_set_List)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set1", m_Set1, STL_list, (STL_CRef, (CLASS, (CFLink_set))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CFLink_set_List_Base::CFLink_set_List_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CFLink_set_List_Base::~CFLink_set_List_Base(void)
{
}


void CFLink_set_Base::ResetUids(void)
{
    m_Uids.clear();
    m_set_State[0] &= ~0xc;
}

void CFLink_set_Base::ResetWeights(void)
{
    m_Weights.clear();
    m_set_State[0] &= ~0x30;
}

void CFLink_set_Base::Reset(void)
{
    ResetNum();
    ResetUids();
    ResetWeights();
}

BEGIN_NAMED_BASE_CLASS_INFO("FLink-set", CFLink_set)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("uids", m_Uids, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("weights", m_Weights, STL_list, (STD, (double)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CFLink_set_Base::CFLink_set_Base(void)
    : m_Num(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CFLink_set_Base::~CFLink_set_Base(void)
{
}


void CCLink_set_List3_Base::ResetSet3(void)
{
    m_Set3.clear();
    m_set_State[0] &= ~0x3;
}

void CCLink_set_List3_Base::Reset(void)
{
    ResetSet3();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("CLink-set-List3", CCLink_set_List3)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set3", m_Set3, STL_list, (STL_CRef, (CLASS, (CCLink_set_List2))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CCLink_set_List3_Base::CCLink_set_List3_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CCLink_set_List3_Base::~CCLink_set_List3_Base(void)
{
}


void CCLink_set_List2_Base::ResetSet2(void)
{
    m_Set2.clear();
    m_set_State[0] &= ~0x3;
}

void CCLink_set_List2_Base::Reset(void)
{
    ResetSet2();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("CLink-set-List2", CCLink_set_List2)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set2", m_Set2, STL_list, (STL_CRef, (CLASS, (CCLink_set_List))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CCLink_set_List2_Base::CCLink_set_List2_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CCLink_set_List2_Base::~CCLink_set_List2_Base(void)
{
}


void CCLink_set_List_Base::ResetSet1(void)
{
    m_Set1.clear();
    m_set_State[0] &= ~0x3;
}

void CCLink_set_List_Base::Reset(void)
{
    ResetSet1();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("CLink-set-List", CCLink_set_List)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set1", m_Set1, STL_list, (STL_CRef, (CLASS, (CCLink_set))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CCLink_set_List_Base::CCLink_set_List_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CCLink_set_List_Base::~CCLink_set_List_Base(void)
{
}


void CCLink_set_Base::ResetUids(void)
{
    m_Uids.clear();
    m_set_State[0] &= ~0xc;
}

void CCLink_set_Base::ResetWeights(void)
{
    m_Weights.clear();
    m_set_State[0] &= ~0x30;
}

void CCLink_set_Base::Reset(void)
{
    ResetNum();
    ResetUids();
    ResetWeights();
}

BEGIN_NAMED_BASE_CLASS_INFO("CLink-set", CCLink_set)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("uids", m_Uids, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("weights", m_Weights, STL_list, (STD, (NCBI_NS_STD::string)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CCLink_set_Base::CCLink_set_Base(void)
    : m_Num(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CCLink_set_Base::~CCLink_set_Base(void)
{
}


void CBLink_set_List3_Base::ResetSet3(void)
{
    m_Set3.clear();
    m_set_State[0] &= ~0x3;
}

void CBLink_set_List3_Base::Reset(void)
{
    ResetSet3();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("BLink-set-List3", CBLink_set_List3)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set3", m_Set3, STL_list, (STL_CRef, (CLASS, (CBLink_set_List2))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CBLink_set_List3_Base::CBLink_set_List3_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CBLink_set_List3_Base::~CBLink_set_List3_Base(void)
{
}


void CBLink_set_List2_Base::ResetSet2(void)
{
    m_Set2.clear();
    m_set_State[0] &= ~0x3;
}

void CBLink_set_List2_Base::Reset(void)
{
    ResetSet2();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("BLink-set-List2", CBLink_set_List2)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set2", m_Set2, STL_list, (STL_CRef, (CLASS, (CBLink_set_List))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CBLink_set_List2_Base::CBLink_set_List2_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CBLink_set_List2_Base::~CBLink_set_List2_Base(void)
{
}


void CBLink_set_List_Base::ResetSet1(void)
{
    m_Set1.clear();
    m_set_State[0] &= ~0x3;
}

void CBLink_set_List_Base::Reset(void)
{
    ResetSet1();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("BLink-set-List", CBLink_set_List)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_MEMBER("set1", m_Set1, STL_list, (STL_CRef, (CLASS, (CBLink_set))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CBLink_set_List_Base::CBLink_set_List_Base(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CBLink_set_List_Base::~CBLink_set_List_Base(void)
{
}


void CBLink_set_Base::ResetUids(void)
{
    m_Uids.clear();
    m_set_State[0] &= ~0xc;
}

void CBLink_set_Base::ResetWeights(void)
{
    m_Weights.clear();
    m_set_State[0] &= ~0x30;
}

void CBLink_set_Base::Reset(void)
{
    ResetNum();
    ResetUids();
    ResetWeights();
}

BEGIN_NAMED_BASE_CLASS_INFO("BLink-set", CBLink_set)
{
    SET_CLASS_MODULE("SLRI-Link-set");
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("uids", m_Uids, STL_list, (STD, (int)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("weights", m_Weights, STL_list, (STD, (NCBI_NS_STD::string)))->SetOptional()->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CBLink_set_Base::CBLink_set_Base(void)
    : m_Num(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CBLink_set_Base::~CBLink_set_Base(void)
{
}



END_slri_SCOPE // namespace slri::

