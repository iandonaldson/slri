#!/usr/bin/perl 

# $Id: DomNameToDB.pl,v 1.1 2005/04/08 20:48:36 zwang Exp $

######################################################################################################
#
# Parse files cddid.tbl and pdbid.txt into table domname:
# file cddid.table is downloaded from ftp://ftp.ncbi.nih.gov/pub/mmdb/cdd/
# file pdbid.txt is generated by parser DomNameToFile, it has pairs of accession and pdbid
#
# This script takes in one parameter: new or update
# If the parameter is new: drop existing table domname, recreate and populate.
# If the parameter is update: delete existing records and repopulate table in one transaction
#
######################################################################################################

use DBI;
use strict;

my $action = @ARGV[0];
if ($action ne "new" && $action ne "update") {
	print "Please provide new or update as parameter.\n";
	exit(1);
}

my $inFile_cdd="cddid.tbl";
my $inFile_pdb="pdbid.txt";
my $table = "domname";


my $dbh;
my $query;
# connect to database
connect_to_db(); 

if ($action eq "new") {
	recreate_table();
}
else {
	delete_records();
} 

####################################################################
#
# parse in file cddid.tbl 
#
###################################################################
open(INFILE, "$inFile_cdd") or die "Cannot open $inFile_cdd for read\n";

while (<INFILE>) {
	chomp;
	my $line = $_;

	my @words = split(/\t/, $line);
	my $pssmid = $words[0];
	my $access = $dbh->quote("$words[1]");
	my $name = $dbh->quote("$words[2]");
	my $desc = $dbh->quote("$words[3]");
	my $length = $words[4];

	############################################
	# insert
	############################################
	$query = "INSERT INTO $table ";
	$query .= "(pssmid, accession, name, description, length) ";
	$query .= "VALUES ";
	$query .= "($pssmid, $access, $name, $desc, $length)";

	$dbh->do(qq{$query});

}
close (INFILE);


####################################################################
#
# parse in file pdbid.txt to update field pdbid in table domname 
#
###################################################################
open(INFILE, "$inFile_pdb") or die "Cannot open $inFile_pdb for read\n";

while (<INFILE>) {
	chomp;
	my $line = $_;

	my @words = split(/\t/, $line);
	my $access = $dbh->quote("$words[0]");
	if ($words[1] ne "") {
		my $pdbid = $dbh->quote("$words[1]");

		#####################
		# update
		#####################
		$query = "UPDATE $table ";
		$query .= "SET pdbid=$pdbid WHERE accession=$access ";

		$dbh->do(qq{$query});
	}
}
close (INFILE);

$dbh->commit();
$dbh->disconnect();
exit(0); 


######################################################################
##
## a sub-routine to get database setup from two configuration files:
## ./.intrenzrc and HOME/.odbc.ini, connect to the database to 
##
#####################################################################
sub connect_to_db() {
  # get configuration for user_name, password, database, alias (DSN)
  my $configfile = ".intrezrc";
  my ($dsn, $user_name, $password, $database, $alias, $host, $port);
  open (CONFIGFILE, "$configfile") || die "Cannot open file $configfile\n";
  while (<CONFIGFILE>) {
        my $line = $_;
        $line =~ s/\s+//g;

        my @words = split(/=/, $line);
        my $attr = $words[0];
        my $value = $words[1];

        if ($attr eq "username") {
                $user_name = $value;
        }
        elsif ($attr eq "password") {
                $password = $value;
        }
        elsif ($attr eq "database") {
                $database = $value;
        }
        elsif ($attr eq "dsn") {
                $alias = $value;
        }
  }

  # get configuration for server and port number from the correct DSN
  my $homedir = $ENV{'HOME'};
  my $configODBC = $homedir . "/.odbc.ini";
  open (CONFIGODBC, "$configODBC") || die "Cannot open file $configODBC\n";
  my ($foundAlias, $gotHost, $gotPort) = (0, 0, 0);
  while (<CONFIGODBC>) {
        my $line = $_;
        $line =~ s/\s+//g;
        # find the correct section
        my $target = "[" . $alias. "]";
        if ($line eq $target) {
                $foundAlias=1;
        }

        # get HOST and PORT from the correct section
        if ($foundAlias == 1) {
                my @words = split(/=/, $line);
                my $attr = $words[0];
                my $value = $words[1];
                if ($attr eq "SERVER") {
                        $host = $value;
                        $gotHost = 1;
                }
                elsif ($attr eq "PORT") {
                        $port = $value;
                        $gotPort = 1;
                }
        }
        # finish with the correct section
        if ($gotHost==1 && $gotPort==1) {
                $foundAlias=0;
        }
  }
  $dsn = "DBI:mysql:" . $database . ":" . $host . ":" . $port;
  $dbh = DBI->connect ($dsn, $user_name, $password, {RaiseError => 1, AutoCommit => 0});
  
  return 1;
}

 
######################################################################
##
## a sub-routine to recreate table  domname
##
#####################################################################
sub recreate_table() {
  # drop existing table
  $dbh->do ("DROP TABLE IF EXISTS $table");

  # create table 
  $query = "CREATE TABLE $table ";
  $query .= "(rowid INTEGER UNSIGNED NOT NULL AUTO_INCREMENT, ";
  $query .= "ts TIMESTAMP NOT NULL, ";
  $query .= "pssmid INTEGER NOT NULL, ";
  $query .= "accession VARCHAR(15) DEFAULT NULL, "; 
  $query .= "name VARCHAR(255) DEFAULT NULL, "; 
  $query .= "description TEXT DEFAULT NULL, "; 
  $query .= "length INTEGER DEFAULT 0, "; 
  $query .= "pdbid VARCHAR(15) DEFAULT NULL, "; 
  $query .= "INDEX idomname_rowid(rowid), "; 
  $query .= "INDEX idomname_ts(ts), "; 
  $query .= "INDEX idomname_pssm(pssmid), "; 
  $query .= "INDEX idomname_acc(accession), "; 
  $query .= "INDEX idomname_name(name(50)), "; 
  $query .= "INDEX idomname_pdbid(pdbid) ) "; 
  $query .= "TYPE=InnoDB "; 
  $dbh->do("$query");
}


######################################################################
##
## a sub-routine to remove all records in table domname
##
#####################################################################
sub delete_records() {
  $dbh->do("DELETE FROM $table;");
}



# $Log: DomNameToDB.pl,v $
# Revision 1.1  2005/04/08 20:48:36  zwang
# New script to parse cddid.tbl pdbid.txt into table domname. File pdbid.txt is generated by parser DomNameToFile. See Bug 3974.
#
