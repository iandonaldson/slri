package genbankIDConversionService;

# -- generated by SOAP::Lite (v0.55) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion?wsdl [Wed Apr 20 11:01:13 2005]

my %methods = (
  SHoundGBAccFromGi => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'GI', type => 'ns:integer', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
    ],
  },
  SHoundGiFromGBAcc => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'gbAcc', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
    ],
  },
  SHoundGiFromDbNameAndId => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'dbName', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
      SOAP::Data->new(name => 'id', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
      SOAP::Data->new(name => 'chain', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
    ],
  },
  SHoundDbNameAndIdListFromGiKeyedList => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'GiList', type => 'ns:ArrayOf_xsd_int', attr => {'xmlns:ns' => 'http://genbankIDConversion.soap.seqhound.blueprint.org'}),
    ],
  },
  SHoundDbNameAndIdListFromGi => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'GI', type => 'ns:integer', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
    ],
  },
  SHoundGBAccFromDbNameAndId => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'dbName', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
      SOAP::Data->new(name => 'id', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
      SOAP::Data->new(name => 'chain', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
    ],
  },
  SHoundDbNameAndIdListFromGBAcc => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'gbAcc', type => 'ns:string', attr => {'xmlns:ns' => 'http://www.w3.org/2001/XMLSchema'}),
    ],
  },
  SHoundDbNameAndIdListFromGBAccKeyedList => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'GBAccList', type => 'ns:ArrayOf_xsd_string', attr => {'xmlns:ns' => 'http://genbankIDConversion.soap.seqhound.blueprint.org'}),
    ],
  },
  SHoundGBAccFromGiKeyedList => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'GiList', type => 'ns:ArrayOf_xsd_int', attr => {'xmlns:ns' => 'http://genbankIDConversion.soap.seqhound.blueprint.org'}),
    ],
  },
  SHoundGiFromGBAccKeyedList => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'GBAccList', type => 'ns:ArrayOf_xsd_string', attr => {'xmlns:ns' => 'http://genbankIDConversion.soap.seqhound.blueprint.org'}),
    ],
  },
  SHoundGiFromDbNameAndIdKeyedList => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'DbNameAndIdList', type => 'ns:ArrayOf_biobeans_ShDbNameAndId', attr => {'xmlns:ns' => 'http://genbankIDConversion.soap.seqhound.blueprint.org'}),
    ],
  },
  SHoundGBAccFromDbNameAndIdKeyedList => {
    endpoint => 'http://seqhound.blueprint.org:8080/soap/services/genbankIDConversion',
    soapaction => '',
    uri => 'urn:genbankIDConversion',
    parameters => [
      SOAP::Data->new(name => 'DbNameAndIdList', type => 'ns:ArrayOf_biobeans_ShDbNameAndId', attr => {'xmlns:ns' => 'http://genbankIDConversion.soap.seqhound.blueprint.org'}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    $self->proxy($method{endpoint} || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my @templates = @{$method{parameters}};
    my $som = $self
      -> endpoint($method{endpoint})
      -> uri($method{uri})
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call($method => map {@templates ? shift(@templates)->value($_) : $_} @_); 
    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

1;
