/* $Id: slristruc_.cpp,v 1.2 2003/09/29 22:17:49 haocl Exp $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the data definition file
 *   'slristruc.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <serial/serialimpl.hpp>

// generated includes
#include <slristruc.hpp>
#include <objects/cdd/Cdd.hpp>
#include <objects/mmdb1/Biostruc.hpp>
#include <objects/seq/Bioseq.hpp>
#include <objects/seqset/Seq_entry.hpp>
#include <objslrilibstruc.hpp>
#include <slristruc.hpp>
BEGIN_seqhound_SCOPE // namespace seqhound::


// generated classes

void CStTaxgiNode_Base::ResetType(void)
{
    m_Type.erase();
}

void CStTaxgiNode_Base::Reset(void)
{
    ResetGi();
    ResetTaxid();
    ResetKloodge();
    ResetType();
}

BEGIN_NAMED_BASE_CLASS_INFO("StTaxgiNode", CStTaxgiNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("taxid", m_Taxid);
    ADD_NAMED_STD_MEMBER("kloodge", m_Kloodge);
    ADD_NAMED_STD_MEMBER("type", m_Type);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStTaxgiNode_Base::CStTaxgiNode_Base(void)
    : m_Gi(0), m_Taxid(0), m_Kloodge(0)
{
}

// destructor
CStTaxgiNode_Base::~CStTaxgiNode_Base(void)
{
}


void CStTaxgi_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StTaxgi", CStTaxgi)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStTaxgiNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStTaxgi_Base::CStTaxgi_Base(void)
{
}

// destructor
CStTaxgi_Base::~CStTaxgi_Base(void)
{
}


void CStSengiNode_Base::ResetDivision(void)
{
    m_Division.erase();
}

void CStSengiNode_Base::Reset(void)
{
    ResetSeid();
    ResetGi();
    ResetDivision();
}

BEGIN_NAMED_BASE_CLASS_INFO("StSengiNode", CStSengiNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("seid", m_Seid);
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("division", m_Division);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStSengiNode_Base::CStSengiNode_Base(void)
    : m_Seid(0), m_Gi(0)
{
}

// destructor
CStSengiNode_Base::~CStSengiNode_Base(void)
{
}


void CStSengi_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StSengi", CStSengi)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStSengiNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStSengi_Base::CStSengi_Base(void)
{
}

// destructor
CStSengi_Base::~CStSengi_Base(void)
{
}


void CStSendbNode_Base::ResetAsn1(void)
{
    (*m_Asn1).Reset();
}

const CStSendbNode_Base::TAsn1& CStSendbNode_Base::GetAsn1(void) const
{
    return (*m_Asn1);
}

void CStSendbNode_Base::SetAsn1(TAsn1& value)
{
    m_Asn1.Reset(&value);
}

void CStSendbNode_Base::Reset(void)
{
    ResetSeid();
    ResetAsn1();
}

BEGIN_NAMED_BASE_CLASS_INFO("StSendbNode", CStSendbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("seid", m_Seid);
    ADD_NAMED_REF_MEMBER("asn1", m_Asn1, NCBI_NS_NCBI::objects::CSeq_entry);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStSendbNode_Base::CStSendbNode_Base(void)
    : m_Seid(0), m_Asn1(new ncbi::objects::CSeq_entry())
{
}

// destructor
CStSendbNode_Base::~CStSendbNode_Base(void)
{
}


void CStSendb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StSendb", CStSendb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStSendbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStSendb_Base::CStSendb_Base(void)
{
}

// destructor
CStSendb_Base::~CStSendb_Base(void)
{
}


void CStRpsdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StRpsdb", CStRpsdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStRpsNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStRpsdb_Base::CStRpsdb_Base(void)
{
}

// destructor
CStRpsdb_Base::~CStRpsdb_Base(void)
{
}


void CStRpsNode_Base::ResetDom_id(void)
{
    m_Dom_id.erase();
}

void CStRpsNode_Base::Reset(void)
{
    ResetGi();
    ResetDom_id();
    ResetCdd_id();
    ResetFrom();
    ResetLen();
    ResetScore();
    ResetEvalue();
    ResetBitscore();
    ResetN_missing();
    ResetC_missing();
    ResetNum_of_dom();
}

BEGIN_NAMED_BASE_CLASS_INFO("StRpsNode", CStRpsNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("dom-id", m_Dom_id);
    ADD_NAMED_STD_MEMBER("cdd-id", m_Cdd_id)->SetOptional(MEMBER_PTR(m_set_Cdd_id));
    ADD_NAMED_STD_MEMBER("from", m_From);
    ADD_NAMED_STD_MEMBER("len", m_Len);
    ADD_NAMED_STD_MEMBER("score", m_Score)->SetOptional(MEMBER_PTR(m_set_Score));
    ADD_NAMED_STD_MEMBER("evalue", m_Evalue);
    ADD_NAMED_STD_MEMBER("bitscore", m_Bitscore)->SetOptional(MEMBER_PTR(m_set_Bitscore));
    ADD_NAMED_STD_MEMBER("n-missing", m_N_missing);
    ADD_NAMED_STD_MEMBER("c-missing", m_C_missing);
    ADD_NAMED_STD_MEMBER("num-of-dom", m_Num_of_dom);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStRpsNode_Base::CStRpsNode_Base(void)
    : m_set_Cdd_id(false), m_set_Score(false), m_set_Bitscore(false), m_Gi(0), m_Cdd_id(0), m_From(0), m_Len(0), m_Score(0), m_Evalue(0), m_Bitscore(0), m_N_missing(0), m_C_missing(0), m_Num_of_dom(0)
{
}

// destructor
CStRpsNode_Base::~CStRpsNode_Base(void)
{
}


void CStRedundNode_Base::Reset(void)
{
    ResetGi();
    ResetOrdinal();
    ResetGroup();
}

BEGIN_NAMED_BASE_CLASS_INFO("StRedundNode", CStRedundNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("ordinal", m_Ordinal);
    ADD_NAMED_STD_MEMBER("group", m_Group);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStRedundNode_Base::CStRedundNode_Base(void)
    : m_Gi(0), m_Ordinal(0), m_Group(0)
{
}

// destructor
CStRedundNode_Base::~CStRedundNode_Base(void)
{
}


void CStRedund_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StRedund", CStRedund)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStRedundNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStRedund_Base::CStRedund_Base(void)
{
}

// destructor
CStRedund_Base::~CStRedund_Base(void)
{
}


void CStPubseqNode_Base::Reset(void)
{
    ResetGi();
    ResetMuid();
    ResetPmid();
}

BEGIN_NAMED_BASE_CLASS_INFO("StPubseqNode", CStPubseqNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("muid", m_Muid);
    ADD_NAMED_STD_MEMBER("pmid", m_Pmid);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStPubseqNode_Base::CStPubseqNode_Base(void)
    : m_Gi(0), m_Muid(0), m_Pmid(0)
{
}

// destructor
CStPubseqNode_Base::~CStPubseqNode_Base(void)
{
}


void CStPubseq_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StPubseq", CStPubseq)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStPubseqNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStPubseq_Base::CStPubseq_Base(void)
{
}

// destructor
CStPubseq_Base::~CStPubseq_Base(void)
{
}


void CStPartiNode_Base::ResetPartition(void)
{
    m_Partition.erase();
}

void CStPartiNode_Base::Reset(void)
{
    ResetGi();
    ResetPartition();
}

BEGIN_NAMED_BASE_CLASS_INFO("StPartiNode", CStPartiNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("partition", m_Partition);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStPartiNode_Base::CStPartiNode_Base(void)
    : m_Gi(0)
{
}

// destructor
CStPartiNode_Base::~CStPartiNode_Base(void)
{
}


void CStParti_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StParti", CStParti)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStPartiNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStParti_Base::CStParti_Base(void)
{
}

// destructor
CStParti_Base::~CStParti_Base(void)
{
}


void CStOMIMdbNode_Base::Reset(void)
{
    ResetNpid();
    ResetOmimid();
}

BEGIN_NAMED_BASE_CLASS_INFO("StOMIMdbNode", CStOMIMdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("npid", m_Npid);
    ADD_NAMED_STD_MEMBER("omimid", m_Omimid);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStOMIMdbNode_Base::CStOMIMdbNode_Base(void)
    : m_Npid(0), m_Omimid(0)
{
}

// destructor
CStOMIMdbNode_Base::~CStOMIMdbNode_Base(void)
{
}


void CStOMIMdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StOMIMdb", CStOMIMdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStOMIMdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStOMIMdb_Base::CStOMIMdb_Base(void)
{
}

// destructor
CStOMIMdb_Base::~CStOMIMdb_Base(void)
{
}


void CStNucprotNode_Base::Reset(void)
{
    ResetGin();
    ResetGia();
}

BEGIN_NAMED_BASE_CLASS_INFO("StNucprotNode", CStNucprotNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gin", m_Gin);
    ADD_NAMED_STD_MEMBER("gia", m_Gia);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStNucprotNode_Base::CStNucprotNode_Base(void)
    : m_Gin(0), m_Gia(0)
{
}

// destructor
CStNucprotNode_Base::~CStNucprotNode_Base(void)
{
}


void CStNucprot_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StNucprot", CStNucprot)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStNucprotNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStNucprot_Base::CStNucprot_Base(void)
{
}

// destructor
CStNucprot_Base::~CStNucprot_Base(void)
{
}


void CStMmgiNode_Base::Reset(void)
{
    ResetMmdbid();
    ResetGi();
}

BEGIN_NAMED_BASE_CLASS_INFO("StMmgiNode", CStMmgiNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("mmdbid", m_Mmdbid);
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStMmgiNode_Base::CStMmgiNode_Base(void)
    : m_Mmdbid(0), m_Gi(0)
{
}

// destructor
CStMmgiNode_Base::~CStMmgiNode_Base(void)
{
}


void CStMmgi_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StMmgi", CStMmgi)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStMmgiNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStMmgi_Base::CStMmgi_Base(void)
{
}

// destructor
CStMmgi_Base::~CStMmgi_Base(void)
{
}


void CStMmdbNode_Base::ResetPdbid(void)
{
    m_Pdbid.erase();
}

void CStMmdbNode_Base::ResetAsn1(void)
{
    (*m_Asn1).Reset();
}

const CStMmdbNode_Base::TAsn1& CStMmdbNode_Base::GetAsn1(void) const
{
    return (*m_Asn1);
}

void CStMmdbNode_Base::SetAsn1(TAsn1& value)
{
    m_Asn1.Reset(&value);
}

void CStMmdbNode_Base::Reset(void)
{
    ResetMmdbid();
    ResetPdbid();
    ResetAsn1();
    ResetBwhat();
    ResetModels();
    ResetMolecules();
    ResetSize();
    ResetBzsize();
}

BEGIN_NAMED_BASE_CLASS_INFO("StMmdbNode", CStMmdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("mmdbid", m_Mmdbid);
    ADD_NAMED_STD_MEMBER("pdbid", m_Pdbid);
    ADD_NAMED_REF_MEMBER("asn1", m_Asn1, NCBI_NS_NCBI::objects::CBiostruc);
    ADD_NAMED_STD_MEMBER("bwhat", m_Bwhat);
    ADD_NAMED_STD_MEMBER("models", m_Models);
    ADD_NAMED_STD_MEMBER("molecules", m_Molecules);
    ADD_NAMED_STD_MEMBER("size", m_Size);
    ADD_NAMED_STD_MEMBER("bzsize", m_Bzsize);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStMmdbNode_Base::CStMmdbNode_Base(void)
    : m_Mmdbid(0), m_Asn1(new ncbi::objects::CBiostruc()), m_Bwhat(0), m_Models(0), m_Molecules(0), m_Size(0), m_Bzsize(0)
{
}

// destructor
CStMmdbNode_Base::~CStMmdbNode_Base(void)
{
}


void CStMmdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StMmdb", CStMmdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStMmdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStMmdb_Base::CStMmdb_Base(void)
{
}

// destructor
CStMmdb_Base::~CStMmdb_Base(void)
{
}


void CStLLdbNode_Base::ResetMap(void)
{
    m_Map.erase();
}

void CStLLdbNode_Base::Reset(void)
{
    ResetNpid();
    ResetLlid();
    ResetMap();
}

BEGIN_NAMED_BASE_CLASS_INFO("StLLdbNode", CStLLdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("npid", m_Npid);
    ADD_NAMED_STD_MEMBER("llid", m_Llid);
    ADD_NAMED_STD_MEMBER("map", m_Map);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStLLdbNode_Base::CStLLdbNode_Base(void)
    : m_Npid(0), m_Llid(0)
{
}

// destructor
CStLLdbNode_Base::~CStLLdbNode_Base(void)
{
}


void CStLLdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StLLdb", CStLLdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStLLdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStLLdb_Base::CStLLdb_Base(void)
{
}

// destructor
CStLLdb_Base::~CStLLdb_Base(void)
{
}


void CStHistdbNode_Base::ResetAccession(void)
{
    m_Accession.erase();
}

void CStHistdbNode_Base::ResetDate(void)
{
    m_Date.erase();
}

void CStHistdbNode_Base::Reset(void)
{
    ResetGi();
    ResetAccession();
    ResetVersion();
    ResetDate();
    ResetAction();
}

BEGIN_NAMED_BASE_CLASS_INFO("StHistdbNode", CStHistdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("accession", m_Accession);
    ADD_NAMED_STD_MEMBER("version", m_Version);
    ADD_NAMED_STD_MEMBER("date", m_Date);
    ADD_NAMED_STD_MEMBER("action", m_Action);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStHistdbNode_Base::CStHistdbNode_Base(void)
    : m_Gi(0), m_Version(0), m_Action(0)
{
}

// destructor
CStHistdbNode_Base::~CStHistdbNode_Base(void)
{
}


void CStHistdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StHistdb", CStHistdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStHistdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStHistdb_Base::CStHistdb_Base(void)
{
}

// destructor
CStHistdb_Base::~CStHistdb_Base(void)
{
}


void CStGOdbNode_Base::ResetEviCode(void)
{
    m_EviCode.erase();
}

void CStGOdbNode_Base::Reset(void)
{
    ResetNpid();
    ResetGoid();
    ResetPmid();
    ResetEviCode();
}

BEGIN_NAMED_BASE_CLASS_INFO("StGOdbNode", CStGOdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("npid", m_Npid);
    ADD_NAMED_STD_MEMBER("goid", m_Goid);
    ADD_NAMED_STD_MEMBER("pmid", m_Pmid);
    ADD_NAMED_STD_MEMBER("eviCode", m_EviCode);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStGOdbNode_Base::CStGOdbNode_Base(void)
    : m_Npid(0), m_Goid(0), m_Pmid(0)
{
}

// destructor
CStGOdbNode_Base::~CStGOdbNode_Base(void)
{
}


void CStGOdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StGOdb", CStGOdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStGOdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStGOdb_Base::CStGOdb_Base(void)
{
}

// destructor
CStGOdb_Base::~CStGOdb_Base(void)
{
}


void CStDomdbNode_Base::ResetAsn1(void)
{
    (*m_Asn1).Reset();
}

const CStDomdbNode_Base::TAsn1& CStDomdbNode_Base::GetAsn1(void) const
{
    return (*m_Asn1);
}

void CStDomdbNode_Base::SetAsn1(TAsn1& value)
{
    m_Asn1.Reset(&value);
}

void CStDomdbNode_Base::ResetPdbid(void)
{
    m_Pdbid.erase();
}

void CStDomdbNode_Base::ResetChain(void)
{
    m_Chain.erase();
}

void CStDomdbNode_Base::Reset(void)
{
    ResetMmdbid();
    ResetAsn1();
    ResetPdbid();
    ResetChain();
    ResetGi();
    ResetDomno();
    ResetDomall();
    ResetDomid();
    ResetRep();
}

BEGIN_NAMED_BASE_CLASS_INFO("StDomdbNode", CStDomdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("mmdbid", m_Mmdbid);
    ADD_NAMED_REF_MEMBER("asn1", m_Asn1, ::slri::CSLRIValNode);
    ADD_NAMED_STD_MEMBER("pdbid", m_Pdbid);
    ADD_NAMED_STD_MEMBER("chain", m_Chain);
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("domno", m_Domno);
    ADD_NAMED_STD_MEMBER("domall", m_Domall);
    ADD_NAMED_STD_MEMBER("domid", m_Domid);
    ADD_NAMED_STD_MEMBER("rep", m_Rep);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStDomdbNode_Base::CStDomdbNode_Base(void)
    : m_Mmdbid(0), m_Asn1(new slri::CSLRIValNode()), m_Gi(0), m_Domno(0), m_Domall(0), m_Domid(0), m_Rep(0)
{
}

// destructor
CStDomdbNode_Base::~CStDomdbNode_Base(void)
{
}


void CStDomdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StDomdb", CStDomdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStDomdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStDomdb_Base::CStDomdb_Base(void)
{
}

// destructor
CStDomdb_Base::~CStDomdb_Base(void)
{
}


void CStDomNamedb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StDomNamedb", CStDomNamedb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStDomNameNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStDomNamedb_Base::CStDomNamedb_Base(void)
{
}

// destructor
CStDomNamedb_Base::~CStDomNamedb_Base(void)
{
}


void CStDomNameNode_Base::ResetAccession(void)
{
    m_Accession.erase();
}

void CStDomNameNode_Base::ResetName(void)
{
    m_Name.erase();
}

void CStDomNameNode_Base::ResetPdb_id(void)
{
    m_Pdb_id.erase();
    m_set_Pdb_id = false;
}

void CStDomNameNode_Base::ResetAsn1(void)
{
    (*m_Asn1).Reset();
}

const CStDomNameNode_Base::TAsn1& CStDomNameNode_Base::GetAsn1(void) const
{
    return (*m_Asn1);
}

void CStDomNameNode_Base::SetAsn1(TAsn1& value)
{
    m_Asn1.Reset(&value);
}

void CStDomNameNode_Base::Reset(void)
{
    ResetAccession();
    ResetName();
    ResetPdb_id();
    ResetAsn1();
}

BEGIN_NAMED_BASE_CLASS_INFO("StDomNameNode", CStDomNameNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("accession", m_Accession);
    ADD_NAMED_STD_MEMBER("name", m_Name);
    ADD_NAMED_STD_MEMBER("pdb-id", m_Pdb_id)->SetOptional(MEMBER_PTR(m_set_Pdb_id));
    ADD_NAMED_REF_MEMBER("asn1", m_Asn1, NCBI_NS_NCBI::objects::CCdd);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStDomNameNode_Base::CStDomNameNode_Base(void)
    : m_set_Pdb_id(false), m_Asn1(new ncbi::objects::CCdd())
{
}

// destructor
CStDomNameNode_Base::~CStDomNameNode_Base(void)
{
}


void CStChromNode_Base::ResetAccess(void)
{
    m_Access.erase();
}

void CStChromNode_Base::ResetName(void)
{
    m_Name.erase();
}

void CStChromNode_Base::Reset(void)
{
    ResetTaxid();
    ResetKloodge();
    ResetChromfl();
    ResetAccess();
    ResetName();
}

BEGIN_NAMED_BASE_CLASS_INFO("StChromNode", CStChromNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("taxid", m_Taxid);
    ADD_NAMED_STD_MEMBER("kloodge", m_Kloodge);
    ADD_NAMED_STD_MEMBER("chromfl", m_Chromfl);
    ADD_NAMED_STD_MEMBER("access", m_Access);
    ADD_NAMED_STD_MEMBER("name", m_Name);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStChromNode_Base::CStChromNode_Base(void)
    : m_Taxid(0), m_Kloodge(0), m_Chromfl(0)
{
}

// destructor
CStChromNode_Base::~CStChromNode_Base(void)
{
}


void CStChrom_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StChrom", CStChrom)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStChromNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStChrom_Base::CStChrom_Base(void)
{
}

// destructor
CStChrom_Base::~CStChrom_Base(void)
{
}


void CStCddbNode_Base::ResetAsn1(void)
{
    (*m_Asn1).Reset();
}

const CStCddbNode_Base::TAsn1& CStCddbNode_Base::GetAsn1(void) const
{
    return (*m_Asn1);
}

void CStCddbNode_Base::SetAsn1(TAsn1& value)
{
    m_Asn1.Reset(&value);
}

void CStCddbNode_Base::Reset(void)
{
    ResetGi();
    ResetAsn1();
}

BEGIN_NAMED_BASE_CLASS_INFO("StCddbNode", CStCddbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_REF_MEMBER("asn1", m_Asn1, ::slri::CSLRIFasta);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStCddbNode_Base::CStCddbNode_Base(void)
    : m_Gi(0), m_Asn1(new slri::CSLRIFasta())
{
}

// destructor
CStCddbNode_Base::~CStCddbNode_Base(void)
{
}


void CStCddb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StCddb", CStCddb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStCddbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStCddb_Base::CStCddb_Base(void)
{
}

// destructor
CStCddb_Base::~CStCddb_Base(void)
{
}


void CStCDDdbNode_Base::ResetCddid(void)
{
    m_Cddid.erase();
}

void CStCDDdbNode_Base::Reset(void)
{
    ResetNpid();
    ResetCddid();
    ResetEValue();
}

BEGIN_NAMED_BASE_CLASS_INFO("StCDDdbNode", CStCDDdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("npid", m_Npid);
    ADD_NAMED_STD_MEMBER("cddid", m_Cddid);
    ADD_NAMED_STD_MEMBER("eValue", m_EValue);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStCDDdbNode_Base::CStCDDdbNode_Base(void)
    : m_Npid(0), m_EValue(0)
{
}

// destructor
CStCDDdbNode_Base::~CStCDDdbNode_Base(void)
{
}


void CStCDDdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StCDDdb", CStCDDdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStCDDdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStCDDdb_Base::CStCDDdb_Base(void)
{
}

// destructor
CStCDDdb_Base::~CStCDDdb_Base(void)
{
}


void CStAsndbNode_Base::ResetAsn1(void)
{
    (*m_Asn1).Reset();
}

const CStAsndbNode_Base::TAsn1& CStAsndbNode_Base::GetAsn1(void) const
{
    return (*m_Asn1);
}

void CStAsndbNode_Base::SetAsn1(TAsn1& value)
{
    m_Asn1.Reset(&value);
}

void CStAsndbNode_Base::ResetDivision(void)
{
    m_Division.erase();
}

void CStAsndbNode_Base::ResetRelease(void)
{
    m_Release.erase();
}

void CStAsndbNode_Base::ResetType(void)
{
    m_Type.erase();
}

void CStAsndbNode_Base::Reset(void)
{
    ResetGi();
    ResetAsn1();
    ResetDivision();
    ResetRelease();
    ResetType();
}

BEGIN_NAMED_BASE_CLASS_INFO("StAsndbNode", CStAsndbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_REF_MEMBER("asn1", m_Asn1, NCBI_NS_NCBI::objects::CBioseq);
    ADD_NAMED_STD_MEMBER("division", m_Division);
    ADD_NAMED_STD_MEMBER("release", m_Release);
    ADD_NAMED_STD_MEMBER("type", m_Type);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStAsndbNode_Base::CStAsndbNode_Base(void)
    : m_Gi(0), m_Asn1(new ncbi::objects::CBioseq())
{
}

// destructor
CStAsndbNode_Base::~CStAsndbNode_Base(void)
{
}


void CStAsndb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StAsndb", CStAsndb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStAsndbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStAsndb_Base::CStAsndb_Base(void)
{
}

// destructor
CStAsndb_Base::~CStAsndb_Base(void)
{
}


void CStAccdbNode_Base::ResetDb(void)
{
    m_Db.erase();
}

void CStAccdbNode_Base::ResetName(void)
{
    m_Name.erase();
}

void CStAccdbNode_Base::ResetAccess(void)
{
    m_Access.erase();
}

void CStAccdbNode_Base::ResetChain(void)
{
    m_Chain.erase();
}

void CStAccdbNode_Base::ResetRelease(void)
{
    m_Release.erase();
}

void CStAccdbNode_Base::ResetTitle(void)
{
    m_Title.erase();
}

void CStAccdbNode_Base::ResetNamelow(void)
{
    m_Namelow.erase();
}

void CStAccdbNode_Base::Reset(void)
{
    ResetGi();
    ResetDb();
    ResetName();
    ResetAccess();
    ResetChain();
    ResetRelease();
    ResetVersion();
    ResetTitle();
    ResetNamelow();
}

BEGIN_NAMED_BASE_CLASS_INFO("StAccdbNode", CStAccdbNode)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_STD_MEMBER("gi", m_Gi);
    ADD_NAMED_STD_MEMBER("db", m_Db);
    ADD_NAMED_STD_MEMBER("name", m_Name);
    ADD_NAMED_STD_MEMBER("access", m_Access);
    ADD_NAMED_STD_MEMBER("chain", m_Chain);
    ADD_NAMED_STD_MEMBER("release", m_Release);
    ADD_NAMED_STD_MEMBER("version", m_Version);
    ADD_NAMED_STD_MEMBER("title", m_Title);
    ADD_NAMED_STD_MEMBER("namelow", m_Namelow);
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStAccdbNode_Base::CStAccdbNode_Base(void)
    : m_Gi(0), m_Version(0)
{
}

// destructor
CStAccdbNode_Base::~CStAccdbNode_Base(void)
{
}


void CStAccdb_Base::Reset(void)
{
    m_data.clear();
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("StAccdb", CStAccdb)
{
    SET_CLASS_MODULE("INTREZ-databases");
    ADD_NAMED_MEMBER("", m_data, STL_list, (STL_CRef, (CLASS, (CStAccdbNode))));
    info->RandomOrder();
}
END_CLASS_INFO

// constructor
CStAccdb_Base::CStAccdb_Base(void)
{
}

// destructor
CStAccdb_Base::~CStAccdb_Base(void)
{
}



END_seqhound_SCOPE // namespace seqhound::

