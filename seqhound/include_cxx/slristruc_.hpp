/* $Id: slristruc_.hpp,v 1.2 2003/09/29 22:18:49 haocl Exp $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the data definition file
 *   'slristruc.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

#ifndef SLRISTRUC_BASE_HPP
#define SLRISTRUC_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CBioseq;
class CBiostruc;
class CCdd;
END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

#ifndef BEGIN_slri_SCOPE
#  define BEGIN_slri_SCOPE BEGIN_SCOPE(slri)
#  define END_slri_SCOPE END_SCOPE(slri)
#endif
BEGIN_slri_SCOPE // namespace slri::

class CSLRIFasta;
class CSLRIValNode;
END_slri_SCOPE // namespace slri::

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::

class CSeq_entry;
END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

#ifndef BEGIN_seqhound_SCOPE
#  define BEGIN_seqhound_SCOPE BEGIN_SCOPE(seqhound)
#  define END_seqhound_SCOPE END_SCOPE(seqhound)
#endif
BEGIN_seqhound_SCOPE // namespace seqhound::

class CStAccdbNode;
class CStAsndbNode;
class CStCDDdbNode;
class CStCddbNode;
class CStChromNode;
class CStDomNameNode;
class CStDomdbNode;
class CStGOdbNode;
class CStHistdbNode;
class CStLLdbNode;
class CStMmdbNode;
class CStMmgiNode;
class CStNucprotNode;
class CStOMIMdbNode;
class CStPartiNode;
class CStPubseqNode;
class CStRedundNode;
class CStRpsNode;
class CStSendbNode;
class CStSengiNode;
class CStTaxgiNode;


// generated classes

class CStTaxgiNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStTaxgiNode_Base(void);
    // destructor
    virtual ~CStTaxgiNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef int TTaxid;
    typedef int TKloodge;
    typedef NCBI_NS_STD::string TType;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetTaxid(void);
    const int& GetTaxid(void) const;
    void SetTaxid(const int& value);
    int& SetTaxid(void);

    void ResetKloodge(void);
    const int& GetKloodge(void) const;
    void SetKloodge(const int& value);
    int& SetKloodge(void);

    void ResetType(void);
    const NCBI_NS_STD::string& GetType(void) const;
    void SetType(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetType(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStTaxgiNode_Base(const CStTaxgiNode_Base&);
    CStTaxgiNode_Base& operator=(const CStTaxgiNode_Base&);

    // members' data
    TGi m_Gi;
    TTaxid m_Taxid;
    TKloodge m_Kloodge;
    TType m_Type;
};
class CStTaxgi_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStTaxgi_Base(void);
    // destructor
    virtual ~CStTaxgi_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStTaxgiNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStTaxgiNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStTaxgiNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStTaxgiNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStTaxgiNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStTaxgi_Base(const CStTaxgi_Base&);
    CStTaxgi_Base& operator=(const CStTaxgi_Base&);

    // members' data
    Tdata m_data;
};
class CStSengiNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStSengiNode_Base(void);
    // destructor
    virtual ~CStSengiNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TSeid;
    typedef int TGi;
    typedef NCBI_NS_STD::string TDivision;

    // members' getters
    // members' setters
    void ResetSeid(void);
    const int& GetSeid(void) const;
    void SetSeid(const int& value);
    int& SetSeid(void);

    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetDivision(void);
    const NCBI_NS_STD::string& GetDivision(void) const;
    void SetDivision(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetDivision(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStSengiNode_Base(const CStSengiNode_Base&);
    CStSengiNode_Base& operator=(const CStSengiNode_Base&);

    // members' data
    TSeid m_Seid;
    TGi m_Gi;
    TDivision m_Division;
};
class CStSengi_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStSengi_Base(void);
    // destructor
    virtual ~CStSengi_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSengiNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSengiNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSengiNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSengiNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSengiNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStSengi_Base(const CStSengi_Base&);
    CStSengi_Base& operator=(const CStSengi_Base&);

    // members' data
    Tdata m_data;
};
class CStSendbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStSendbNode_Base(void);
    // destructor
    virtual ~CStSendbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TSeid;
    typedef NCBI_NS_NCBI::objects::CSeq_entry TAsn1;

    // members' getters
    // members' setters
    void ResetSeid(void);
    const int& GetSeid(void) const;
    void SetSeid(const int& value);
    int& SetSeid(void);

    void ResetAsn1(void);
    const NCBI_NS_NCBI::objects::CSeq_entry& GetAsn1(void) const;
    void SetAsn1(NCBI_NS_NCBI::objects::CSeq_entry& value);
    NCBI_NS_NCBI::objects::CSeq_entry& SetAsn1(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStSendbNode_Base(const CStSendbNode_Base&);
    CStSendbNode_Base& operator=(const CStSendbNode_Base&);

    // members' data
    TSeid m_Seid;
    NCBI_NS_NCBI::CRef< TAsn1 > m_Asn1;
};
class CStSendb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStSendb_Base(void);
    // destructor
    virtual ~CStSendb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSendbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSendbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSendbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSendbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStSendbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStSendb_Base(const CStSendb_Base&);
    CStSendb_Base& operator=(const CStSendb_Base&);

    // members' data
    Tdata m_data;
};
class CStRpsdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStRpsdb_Base(void);
    // destructor
    virtual ~CStRpsdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRpsNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRpsNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRpsNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRpsNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRpsNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStRpsdb_Base(const CStRpsdb_Base&);
    CStRpsdb_Base& operator=(const CStRpsdb_Base&);

    // members' data
    Tdata m_data;
};
class CStRpsNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStRpsNode_Base(void);
    // destructor
    virtual ~CStRpsNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef NCBI_NS_STD::string TDom_id;
    typedef int TCdd_id;
    typedef int TFrom;
    typedef int TLen;
    typedef int TScore;
    typedef double TEvalue;
    typedef double TBitscore;
    typedef int TN_missing;
    typedef int TC_missing;
    typedef int TNum_of_dom;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetDom_id(void);
    const NCBI_NS_STD::string& GetDom_id(void) const;
    void SetDom_id(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetDom_id(void);

    bool IsSetCdd_id(void) const;
    void ResetCdd_id(void);
    const int& GetCdd_id(void) const;
    void SetCdd_id(const int& value);
    int& SetCdd_id(void);

    void ResetFrom(void);
    const int& GetFrom(void) const;
    void SetFrom(const int& value);
    int& SetFrom(void);

    void ResetLen(void);
    const int& GetLen(void) const;
    void SetLen(const int& value);
    int& SetLen(void);

    bool IsSetScore(void) const;
    void ResetScore(void);
    const int& GetScore(void) const;
    void SetScore(const int& value);
    int& SetScore(void);

    void ResetEvalue(void);
    const double& GetEvalue(void) const;
    void SetEvalue(const double& value);
    double& SetEvalue(void);

    bool IsSetBitscore(void) const;
    void ResetBitscore(void);
    const double& GetBitscore(void) const;
    void SetBitscore(const double& value);
    double& SetBitscore(void);

    void ResetN_missing(void);
    const int& GetN_missing(void) const;
    void SetN_missing(const int& value);
    int& SetN_missing(void);

    void ResetC_missing(void);
    const int& GetC_missing(void) const;
    void SetC_missing(const int& value);
    int& SetC_missing(void);

    void ResetNum_of_dom(void);
    const int& GetNum_of_dom(void) const;
    void SetNum_of_dom(const int& value);
    int& SetNum_of_dom(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStRpsNode_Base(const CStRpsNode_Base&);
    CStRpsNode_Base& operator=(const CStRpsNode_Base&);

    // members' data
    bool m_set_Cdd_id;
    bool m_set_Score;
    bool m_set_Bitscore;
    TGi m_Gi;
    TDom_id m_Dom_id;
    TCdd_id m_Cdd_id;
    TFrom m_From;
    TLen m_Len;
    TScore m_Score;
    TEvalue m_Evalue;
    TBitscore m_Bitscore;
    TN_missing m_N_missing;
    TC_missing m_C_missing;
    TNum_of_dom m_Num_of_dom;
};
class CStRedundNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStRedundNode_Base(void);
    // destructor
    virtual ~CStRedundNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef int TOrdinal;
    typedef int TGroup;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetOrdinal(void);
    const int& GetOrdinal(void) const;
    void SetOrdinal(const int& value);
    int& SetOrdinal(void);

    void ResetGroup(void);
    const int& GetGroup(void) const;
    void SetGroup(const int& value);
    int& SetGroup(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStRedundNode_Base(const CStRedundNode_Base&);
    CStRedundNode_Base& operator=(const CStRedundNode_Base&);

    // members' data
    TGi m_Gi;
    TOrdinal m_Ordinal;
    TGroup m_Group;
};
class CStRedund_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStRedund_Base(void);
    // destructor
    virtual ~CStRedund_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRedundNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRedundNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRedundNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRedundNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStRedundNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStRedund_Base(const CStRedund_Base&);
    CStRedund_Base& operator=(const CStRedund_Base&);

    // members' data
    Tdata m_data;
};
class CStPubseqNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStPubseqNode_Base(void);
    // destructor
    virtual ~CStPubseqNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef int TMuid;
    typedef int TPmid;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetMuid(void);
    const int& GetMuid(void) const;
    void SetMuid(const int& value);
    int& SetMuid(void);

    void ResetPmid(void);
    const int& GetPmid(void) const;
    void SetPmid(const int& value);
    int& SetPmid(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStPubseqNode_Base(const CStPubseqNode_Base&);
    CStPubseqNode_Base& operator=(const CStPubseqNode_Base&);

    // members' data
    TGi m_Gi;
    TMuid m_Muid;
    TPmid m_Pmid;
};
class CStPubseq_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStPubseq_Base(void);
    // destructor
    virtual ~CStPubseq_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPubseqNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPubseqNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPubseqNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPubseqNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPubseqNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStPubseq_Base(const CStPubseq_Base&);
    CStPubseq_Base& operator=(const CStPubseq_Base&);

    // members' data
    Tdata m_data;
};
class CStPartiNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStPartiNode_Base(void);
    // destructor
    virtual ~CStPartiNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef NCBI_NS_STD::string TPartition;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetPartition(void);
    const NCBI_NS_STD::string& GetPartition(void) const;
    void SetPartition(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetPartition(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStPartiNode_Base(const CStPartiNode_Base&);
    CStPartiNode_Base& operator=(const CStPartiNode_Base&);

    // members' data
    TGi m_Gi;
    TPartition m_Partition;
};
class CStParti_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStParti_Base(void);
    // destructor
    virtual ~CStParti_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPartiNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPartiNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPartiNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPartiNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStPartiNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStParti_Base(const CStParti_Base&);
    CStParti_Base& operator=(const CStParti_Base&);

    // members' data
    Tdata m_data;
};
class CStOMIMdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStOMIMdbNode_Base(void);
    // destructor
    virtual ~CStOMIMdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TNpid;
    typedef int TOmimid;

    // members' getters
    // members' setters
    void ResetNpid(void);
    const int& GetNpid(void) const;
    void SetNpid(const int& value);
    int& SetNpid(void);

    void ResetOmimid(void);
    const int& GetOmimid(void) const;
    void SetOmimid(const int& value);
    int& SetOmimid(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStOMIMdbNode_Base(const CStOMIMdbNode_Base&);
    CStOMIMdbNode_Base& operator=(const CStOMIMdbNode_Base&);

    // members' data
    TNpid m_Npid;
    TOmimid m_Omimid;
};
class CStOMIMdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStOMIMdb_Base(void);
    // destructor
    virtual ~CStOMIMdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStOMIMdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStOMIMdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStOMIMdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStOMIMdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStOMIMdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStOMIMdb_Base(const CStOMIMdb_Base&);
    CStOMIMdb_Base& operator=(const CStOMIMdb_Base&);

    // members' data
    Tdata m_data;
};
class CStNucprotNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStNucprotNode_Base(void);
    // destructor
    virtual ~CStNucprotNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGin;
    typedef int TGia;

    // members' getters
    // members' setters
    void ResetGin(void);
    const int& GetGin(void) const;
    void SetGin(const int& value);
    int& SetGin(void);

    void ResetGia(void);
    const int& GetGia(void) const;
    void SetGia(const int& value);
    int& SetGia(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStNucprotNode_Base(const CStNucprotNode_Base&);
    CStNucprotNode_Base& operator=(const CStNucprotNode_Base&);

    // members' data
    TGin m_Gin;
    TGia m_Gia;
};
class CStNucprot_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStNucprot_Base(void);
    // destructor
    virtual ~CStNucprot_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStNucprotNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStNucprotNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStNucprotNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStNucprotNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStNucprotNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStNucprot_Base(const CStNucprot_Base&);
    CStNucprot_Base& operator=(const CStNucprot_Base&);

    // members' data
    Tdata m_data;
};
class CStMmgiNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStMmgiNode_Base(void);
    // destructor
    virtual ~CStMmgiNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TMmdbid;
    typedef int TGi;

    // members' getters
    // members' setters
    void ResetMmdbid(void);
    const int& GetMmdbid(void) const;
    void SetMmdbid(const int& value);
    int& SetMmdbid(void);

    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStMmgiNode_Base(const CStMmgiNode_Base&);
    CStMmgiNode_Base& operator=(const CStMmgiNode_Base&);

    // members' data
    TMmdbid m_Mmdbid;
    TGi m_Gi;
};
class CStMmgi_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStMmgi_Base(void);
    // destructor
    virtual ~CStMmgi_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmgiNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmgiNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmgiNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmgiNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmgiNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStMmgi_Base(const CStMmgi_Base&);
    CStMmgi_Base& operator=(const CStMmgi_Base&);

    // members' data
    Tdata m_data;
};
class CStMmdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStMmdbNode_Base(void);
    // destructor
    virtual ~CStMmdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TMmdbid;
    typedef NCBI_NS_STD::string TPdbid;
    typedef NCBI_NS_NCBI::objects::CBiostruc TAsn1;
    typedef int TBwhat;
    typedef int TModels;
    typedef int TMolecules;
    typedef int TSize;
    typedef int TBzsize;

    // members' getters
    // members' setters
    void ResetMmdbid(void);
    const int& GetMmdbid(void) const;
    void SetMmdbid(const int& value);
    int& SetMmdbid(void);

    void ResetPdbid(void);
    const NCBI_NS_STD::string& GetPdbid(void) const;
    void SetPdbid(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetPdbid(void);

    void ResetAsn1(void);
    const NCBI_NS_NCBI::objects::CBiostruc& GetAsn1(void) const;
    void SetAsn1(NCBI_NS_NCBI::objects::CBiostruc& value);
    NCBI_NS_NCBI::objects::CBiostruc& SetAsn1(void);

    void ResetBwhat(void);
    const int& GetBwhat(void) const;
    void SetBwhat(const int& value);
    int& SetBwhat(void);

    void ResetModels(void);
    const int& GetModels(void) const;
    void SetModels(const int& value);
    int& SetModels(void);

    void ResetMolecules(void);
    const int& GetMolecules(void) const;
    void SetMolecules(const int& value);
    int& SetMolecules(void);

    void ResetSize(void);
    const int& GetSize(void) const;
    void SetSize(const int& value);
    int& SetSize(void);

    void ResetBzsize(void);
    const int& GetBzsize(void) const;
    void SetBzsize(const int& value);
    int& SetBzsize(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStMmdbNode_Base(const CStMmdbNode_Base&);
    CStMmdbNode_Base& operator=(const CStMmdbNode_Base&);

    // members' data
    TMmdbid m_Mmdbid;
    TPdbid m_Pdbid;
    NCBI_NS_NCBI::CRef< TAsn1 > m_Asn1;
    TBwhat m_Bwhat;
    TModels m_Models;
    TMolecules m_Molecules;
    TSize m_Size;
    TBzsize m_Bzsize;
};
class CStMmdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStMmdb_Base(void);
    // destructor
    virtual ~CStMmdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStMmdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStMmdb_Base(const CStMmdb_Base&);
    CStMmdb_Base& operator=(const CStMmdb_Base&);

    // members' data
    Tdata m_data;
};
class CStLLdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStLLdbNode_Base(void);
    // destructor
    virtual ~CStLLdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TNpid;
    typedef int TLlid;
    typedef NCBI_NS_STD::string TMap;

    // members' getters
    // members' setters
    void ResetNpid(void);
    const int& GetNpid(void) const;
    void SetNpid(const int& value);
    int& SetNpid(void);

    void ResetLlid(void);
    const int& GetLlid(void) const;
    void SetLlid(const int& value);
    int& SetLlid(void);

    void ResetMap(void);
    const NCBI_NS_STD::string& GetMap(void) const;
    void SetMap(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetMap(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStLLdbNode_Base(const CStLLdbNode_Base&);
    CStLLdbNode_Base& operator=(const CStLLdbNode_Base&);

    // members' data
    TNpid m_Npid;
    TLlid m_Llid;
    TMap m_Map;
};
class CStLLdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStLLdb_Base(void);
    // destructor
    virtual ~CStLLdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStLLdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStLLdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStLLdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStLLdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStLLdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStLLdb_Base(const CStLLdb_Base&);
    CStLLdb_Base& operator=(const CStLLdb_Base&);

    // members' data
    Tdata m_data;
};
class CStHistdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStHistdbNode_Base(void);
    // destructor
    virtual ~CStHistdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef NCBI_NS_STD::string TAccession;
    typedef int TVersion;
    typedef NCBI_NS_STD::string TDate;
    typedef int TAction;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetAccession(void);
    const NCBI_NS_STD::string& GetAccession(void) const;
    void SetAccession(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetAccession(void);

    void ResetVersion(void);
    const int& GetVersion(void) const;
    void SetVersion(const int& value);
    int& SetVersion(void);

    void ResetDate(void);
    const NCBI_NS_STD::string& GetDate(void) const;
    void SetDate(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetDate(void);

    void ResetAction(void);
    const int& GetAction(void) const;
    void SetAction(const int& value);
    int& SetAction(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStHistdbNode_Base(const CStHistdbNode_Base&);
    CStHistdbNode_Base& operator=(const CStHistdbNode_Base&);

    // members' data
    TGi m_Gi;
    TAccession m_Accession;
    TVersion m_Version;
    TDate m_Date;
    TAction m_Action;
};
class CStHistdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStHistdb_Base(void);
    // destructor
    virtual ~CStHistdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStHistdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStHistdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStHistdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStHistdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStHistdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStHistdb_Base(const CStHistdb_Base&);
    CStHistdb_Base& operator=(const CStHistdb_Base&);

    // members' data
    Tdata m_data;
};
class CStGOdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStGOdbNode_Base(void);
    // destructor
    virtual ~CStGOdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TNpid;
    typedef int TGoid;
    typedef int TPmid;
    typedef NCBI_NS_STD::string TEviCode;

    // members' getters
    // members' setters
    void ResetNpid(void);
    const int& GetNpid(void) const;
    void SetNpid(const int& value);
    int& SetNpid(void);

    void ResetGoid(void);
    const int& GetGoid(void) const;
    void SetGoid(const int& value);
    int& SetGoid(void);

    void ResetPmid(void);
    const int& GetPmid(void) const;
    void SetPmid(const int& value);
    int& SetPmid(void);

    void ResetEviCode(void);
    const NCBI_NS_STD::string& GetEviCode(void) const;
    void SetEviCode(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetEviCode(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStGOdbNode_Base(const CStGOdbNode_Base&);
    CStGOdbNode_Base& operator=(const CStGOdbNode_Base&);

    // members' data
    TNpid m_Npid;
    TGoid m_Goid;
    TPmid m_Pmid;
    TEviCode m_EviCode;
};
class CStGOdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStGOdb_Base(void);
    // destructor
    virtual ~CStGOdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStGOdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStGOdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStGOdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStGOdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStGOdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStGOdb_Base(const CStGOdb_Base&);
    CStGOdb_Base& operator=(const CStGOdb_Base&);

    // members' data
    Tdata m_data;
};
class CStDomdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStDomdbNode_Base(void);
    // destructor
    virtual ~CStDomdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TMmdbid;
    typedef ::slri::CSLRIValNode TAsn1;
    typedef NCBI_NS_STD::string TPdbid;
    typedef NCBI_NS_STD::string TChain;
    typedef int TGi;
    typedef int TDomno;
    typedef int TDomall;
    typedef int TDomid;
    typedef int TRep;

    // members' getters
    // members' setters
    void ResetMmdbid(void);
    const int& GetMmdbid(void) const;
    void SetMmdbid(const int& value);
    int& SetMmdbid(void);

    void ResetAsn1(void);
    const ::slri::CSLRIValNode& GetAsn1(void) const;
    void SetAsn1(::slri::CSLRIValNode& value);
    ::slri::CSLRIValNode& SetAsn1(void);

    void ResetPdbid(void);
    const NCBI_NS_STD::string& GetPdbid(void) const;
    void SetPdbid(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetPdbid(void);

    void ResetChain(void);
    const NCBI_NS_STD::string& GetChain(void) const;
    void SetChain(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetChain(void);

    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetDomno(void);
    const int& GetDomno(void) const;
    void SetDomno(const int& value);
    int& SetDomno(void);

    void ResetDomall(void);
    const int& GetDomall(void) const;
    void SetDomall(const int& value);
    int& SetDomall(void);

    void ResetDomid(void);
    const int& GetDomid(void) const;
    void SetDomid(const int& value);
    int& SetDomid(void);

    void ResetRep(void);
    const int& GetRep(void) const;
    void SetRep(const int& value);
    int& SetRep(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStDomdbNode_Base(const CStDomdbNode_Base&);
    CStDomdbNode_Base& operator=(const CStDomdbNode_Base&);

    // members' data
    TMmdbid m_Mmdbid;
    NCBI_NS_NCBI::CRef< TAsn1 > m_Asn1;
    TPdbid m_Pdbid;
    TChain m_Chain;
    TGi m_Gi;
    TDomno m_Domno;
    TDomall m_Domall;
    TDomid m_Domid;
    TRep m_Rep;
};
class CStDomdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStDomdb_Base(void);
    // destructor
    virtual ~CStDomdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStDomdb_Base(const CStDomdb_Base&);
    CStDomdb_Base& operator=(const CStDomdb_Base&);

    // members' data
    Tdata m_data;
};
class CStDomNamedb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStDomNamedb_Base(void);
    // destructor
    virtual ~CStDomNamedb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomNameNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomNameNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomNameNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomNameNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStDomNameNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStDomNamedb_Base(const CStDomNamedb_Base&);
    CStDomNamedb_Base& operator=(const CStDomNamedb_Base&);

    // members' data
    Tdata m_data;
};
class CStDomNameNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStDomNameNode_Base(void);
    // destructor
    virtual ~CStDomNameNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::string TAccession;
    typedef NCBI_NS_STD::string TName;
    typedef NCBI_NS_STD::string TPdb_id;
    typedef NCBI_NS_NCBI::objects::CCdd TAsn1;

    // members' getters
    // members' setters
    void ResetAccession(void);
    const NCBI_NS_STD::string& GetAccession(void) const;
    void SetAccession(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetAccession(void);

    void ResetName(void);
    const NCBI_NS_STD::string& GetName(void) const;
    void SetName(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetName(void);

    bool IsSetPdb_id(void) const;
    void ResetPdb_id(void);
    const NCBI_NS_STD::string& GetPdb_id(void) const;
    void SetPdb_id(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetPdb_id(void);

    void ResetAsn1(void);
    const NCBI_NS_NCBI::objects::CCdd& GetAsn1(void) const;
    void SetAsn1(NCBI_NS_NCBI::objects::CCdd& value);
    NCBI_NS_NCBI::objects::CCdd& SetAsn1(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStDomNameNode_Base(const CStDomNameNode_Base&);
    CStDomNameNode_Base& operator=(const CStDomNameNode_Base&);

    // members' data
    bool m_set_Pdb_id;
    TAccession m_Accession;
    TName m_Name;
    TPdb_id m_Pdb_id;
    NCBI_NS_NCBI::CRef< TAsn1 > m_Asn1;
};
class CStChromNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStChromNode_Base(void);
    // destructor
    virtual ~CStChromNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TTaxid;
    typedef int TKloodge;
    typedef int TChromfl;
    typedef NCBI_NS_STD::string TAccess;
    typedef NCBI_NS_STD::string TName;

    // members' getters
    // members' setters
    void ResetTaxid(void);
    const int& GetTaxid(void) const;
    void SetTaxid(const int& value);
    int& SetTaxid(void);

    void ResetKloodge(void);
    const int& GetKloodge(void) const;
    void SetKloodge(const int& value);
    int& SetKloodge(void);

    void ResetChromfl(void);
    const int& GetChromfl(void) const;
    void SetChromfl(const int& value);
    int& SetChromfl(void);

    void ResetAccess(void);
    const NCBI_NS_STD::string& GetAccess(void) const;
    void SetAccess(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetAccess(void);

    void ResetName(void);
    const NCBI_NS_STD::string& GetName(void) const;
    void SetName(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetName(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStChromNode_Base(const CStChromNode_Base&);
    CStChromNode_Base& operator=(const CStChromNode_Base&);

    // members' data
    TTaxid m_Taxid;
    TKloodge m_Kloodge;
    TChromfl m_Chromfl;
    TAccess m_Access;
    TName m_Name;
};
class CStChrom_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStChrom_Base(void);
    // destructor
    virtual ~CStChrom_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStChromNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStChromNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStChromNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStChromNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStChromNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStChrom_Base(const CStChrom_Base&);
    CStChrom_Base& operator=(const CStChrom_Base&);

    // members' data
    Tdata m_data;
};
class CStCddbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStCddbNode_Base(void);
    // destructor
    virtual ~CStCddbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef ::slri::CSLRIFasta TAsn1;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetAsn1(void);
    const ::slri::CSLRIFasta& GetAsn1(void) const;
    void SetAsn1(::slri::CSLRIFasta& value);
    ::slri::CSLRIFasta& SetAsn1(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStCddbNode_Base(const CStCddbNode_Base&);
    CStCddbNode_Base& operator=(const CStCddbNode_Base&);

    // members' data
    TGi m_Gi;
    NCBI_NS_NCBI::CRef< TAsn1 > m_Asn1;
};
class CStCddb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStCddb_Base(void);
    // destructor
    virtual ~CStCddb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCddbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCddbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCddbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCddbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCddbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStCddb_Base(const CStCddb_Base&);
    CStCddb_Base& operator=(const CStCddb_Base&);

    // members' data
    Tdata m_data;
};
class CStCDDdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStCDDdbNode_Base(void);
    // destructor
    virtual ~CStCDDdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TNpid;
    typedef NCBI_NS_STD::string TCddid;
    typedef double TEValue;

    // members' getters
    // members' setters
    void ResetNpid(void);
    const int& GetNpid(void) const;
    void SetNpid(const int& value);
    int& SetNpid(void);

    void ResetCddid(void);
    const NCBI_NS_STD::string& GetCddid(void) const;
    void SetCddid(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetCddid(void);

    void ResetEValue(void);
    const double& GetEValue(void) const;
    void SetEValue(const double& value);
    double& SetEValue(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStCDDdbNode_Base(const CStCDDdbNode_Base&);
    CStCDDdbNode_Base& operator=(const CStCDDdbNode_Base&);

    // members' data
    TNpid m_Npid;
    TCddid m_Cddid;
    TEValue m_EValue;
};
class CStCDDdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStCDDdb_Base(void);
    // destructor
    virtual ~CStCDDdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCDDdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCDDdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCDDdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCDDdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStCDDdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStCDDdb_Base(const CStCDDdb_Base&);
    CStCDDdb_Base& operator=(const CStCDDdb_Base&);

    // members' data
    Tdata m_data;
};
class CStAsndbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStAsndbNode_Base(void);
    // destructor
    virtual ~CStAsndbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef NCBI_NS_NCBI::objects::CBioseq TAsn1;
    typedef NCBI_NS_STD::string TDivision;
    typedef NCBI_NS_STD::string TRelease;
    typedef NCBI_NS_STD::string TType;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetAsn1(void);
    const NCBI_NS_NCBI::objects::CBioseq& GetAsn1(void) const;
    void SetAsn1(NCBI_NS_NCBI::objects::CBioseq& value);
    NCBI_NS_NCBI::objects::CBioseq& SetAsn1(void);

    void ResetDivision(void);
    const NCBI_NS_STD::string& GetDivision(void) const;
    void SetDivision(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetDivision(void);

    void ResetRelease(void);
    const NCBI_NS_STD::string& GetRelease(void) const;
    void SetRelease(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetRelease(void);

    void ResetType(void);
    const NCBI_NS_STD::string& GetType(void) const;
    void SetType(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetType(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStAsndbNode_Base(const CStAsndbNode_Base&);
    CStAsndbNode_Base& operator=(const CStAsndbNode_Base&);

    // members' data
    TGi m_Gi;
    NCBI_NS_NCBI::CRef< TAsn1 > m_Asn1;
    TDivision m_Division;
    TRelease m_Release;
    TType m_Type;
};
class CStAsndb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStAsndb_Base(void);
    // destructor
    virtual ~CStAsndb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAsndbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAsndbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAsndbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAsndbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAsndbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStAsndb_Base(const CStAsndb_Base&);
    CStAsndb_Base& operator=(const CStAsndb_Base&);

    // members' data
    Tdata m_data;
};
class CStAccdbNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStAccdbNode_Base(void);
    // destructor
    virtual ~CStAccdbNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef NCBI_NS_STD::string TDb;
    typedef NCBI_NS_STD::string TName;
    typedef NCBI_NS_STD::string TAccess;
    typedef NCBI_NS_STD::string TChain;
    typedef NCBI_NS_STD::string TRelease;
    typedef int TVersion;
    typedef NCBI_NS_STD::string TTitle;
    typedef NCBI_NS_STD::string TNamelow;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetDb(void);
    const NCBI_NS_STD::string& GetDb(void) const;
    void SetDb(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetDb(void);

    void ResetName(void);
    const NCBI_NS_STD::string& GetName(void) const;
    void SetName(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetName(void);

    void ResetAccess(void);
    const NCBI_NS_STD::string& GetAccess(void) const;
    void SetAccess(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetAccess(void);

    void ResetChain(void);
    const NCBI_NS_STD::string& GetChain(void) const;
    void SetChain(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetChain(void);

    void ResetRelease(void);
    const NCBI_NS_STD::string& GetRelease(void) const;
    void SetRelease(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetRelease(void);

    void ResetVersion(void);
    const int& GetVersion(void) const;
    void SetVersion(const int& value);
    int& SetVersion(void);

    void ResetTitle(void);
    const NCBI_NS_STD::string& GetTitle(void) const;
    void SetTitle(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetTitle(void);

    void ResetNamelow(void);
    const NCBI_NS_STD::string& GetNamelow(void) const;
    void SetNamelow(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetNamelow(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStAccdbNode_Base(const CStAccdbNode_Base&);
    CStAccdbNode_Base& operator=(const CStAccdbNode_Base&);

    // members' data
    TGi m_Gi;
    TDb m_Db;
    TName m_Name;
    TAccess m_Access;
    TChain m_Chain;
    TRelease m_Release;
    TVersion m_Version;
    TTitle m_Title;
    TNamelow m_Namelow;
};
class CStAccdb_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CStAccdb_Base(void);
    // destructor
    virtual ~CStAccdb_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAccdbNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAccdbNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAccdbNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAccdbNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CStAccdbNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CStAccdb_Base(const CStAccdb_Base&);
    CStAccdb_Base& operator=(const CStAccdb_Base&);

    // members' data
    Tdata m_data;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
void CStTaxgiNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStTaxgiNode_Base::TGi& CStTaxgiNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStTaxgiNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStTaxgiNode_Base::TGi& CStTaxgiNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
void CStTaxgiNode_Base::ResetTaxid(void)
{
    m_Taxid = 0;
}

inline
const CStTaxgiNode_Base::TTaxid& CStTaxgiNode_Base::GetTaxid(void) const
{
    return m_Taxid;
}

inline
void CStTaxgiNode_Base::SetTaxid(const TTaxid& value)
{
    m_Taxid = value;
}

inline
CStTaxgiNode_Base::TTaxid& CStTaxgiNode_Base::SetTaxid(void)
{
    return m_Taxid;
}

inline
void CStTaxgiNode_Base::ResetKloodge(void)
{
    m_Kloodge = 0;
}

inline
const CStTaxgiNode_Base::TKloodge& CStTaxgiNode_Base::GetKloodge(void) const
{
    return m_Kloodge;
}

inline
void CStTaxgiNode_Base::SetKloodge(const TKloodge& value)
{
    m_Kloodge = value;
}

inline
CStTaxgiNode_Base::TKloodge& CStTaxgiNode_Base::SetKloodge(void)
{
    return m_Kloodge;
}

inline
const CStTaxgiNode_Base::TType& CStTaxgiNode_Base::GetType(void) const
{
    return m_Type;
}

inline
void CStTaxgiNode_Base::SetType(const TType& value)
{
    m_Type = value;
}

inline
CStTaxgiNode_Base::TType& CStTaxgiNode_Base::SetType(void)
{
    return m_Type;
}

inline
const CStTaxgi_Base::Tdata& CStTaxgi_Base::Get(void) const
{
    return m_data;
}

inline
CStTaxgi_Base::Tdata& CStTaxgi_Base::Set(void)
{
    return m_data;
}

inline
CStTaxgi_Base::operator const CStTaxgi_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStTaxgi_Base::operator CStTaxgi_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStSengiNode_Base::ResetSeid(void)
{
    m_Seid = 0;
}

inline
const CStSengiNode_Base::TSeid& CStSengiNode_Base::GetSeid(void) const
{
    return m_Seid;
}

inline
void CStSengiNode_Base::SetSeid(const TSeid& value)
{
    m_Seid = value;
}

inline
CStSengiNode_Base::TSeid& CStSengiNode_Base::SetSeid(void)
{
    return m_Seid;
}

inline
void CStSengiNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStSengiNode_Base::TGi& CStSengiNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStSengiNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStSengiNode_Base::TGi& CStSengiNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
const CStSengiNode_Base::TDivision& CStSengiNode_Base::GetDivision(void) const
{
    return m_Division;
}

inline
void CStSengiNode_Base::SetDivision(const TDivision& value)
{
    m_Division = value;
}

inline
CStSengiNode_Base::TDivision& CStSengiNode_Base::SetDivision(void)
{
    return m_Division;
}

inline
const CStSengi_Base::Tdata& CStSengi_Base::Get(void) const
{
    return m_data;
}

inline
CStSengi_Base::Tdata& CStSengi_Base::Set(void)
{
    return m_data;
}

inline
CStSengi_Base::operator const CStSengi_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStSengi_Base::operator CStSengi_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStSendbNode_Base::ResetSeid(void)
{
    m_Seid = 0;
}

inline
const CStSendbNode_Base::TSeid& CStSendbNode_Base::GetSeid(void) const
{
    return m_Seid;
}

inline
void CStSendbNode_Base::SetSeid(const TSeid& value)
{
    m_Seid = value;
}

inline
CStSendbNode_Base::TSeid& CStSendbNode_Base::SetSeid(void)
{
    return m_Seid;
}

inline
CStSendbNode_Base::TAsn1& CStSendbNode_Base::SetAsn1(void)
{
    return (*m_Asn1);
}

inline
const CStSendb_Base::Tdata& CStSendb_Base::Get(void) const
{
    return m_data;
}

inline
CStSendb_Base::Tdata& CStSendb_Base::Set(void)
{
    return m_data;
}

inline
CStSendb_Base::operator const CStSendb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStSendb_Base::operator CStSendb_Base::Tdata& (void)
{
    return m_data;
}

inline
const CStRpsdb_Base::Tdata& CStRpsdb_Base::Get(void) const
{
    return m_data;
}

inline
CStRpsdb_Base::Tdata& CStRpsdb_Base::Set(void)
{
    return m_data;
}

inline
CStRpsdb_Base::operator const CStRpsdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStRpsdb_Base::operator CStRpsdb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStRpsNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStRpsNode_Base::TGi& CStRpsNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStRpsNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStRpsNode_Base::TGi& CStRpsNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
const CStRpsNode_Base::TDom_id& CStRpsNode_Base::GetDom_id(void) const
{
    return m_Dom_id;
}

inline
void CStRpsNode_Base::SetDom_id(const TDom_id& value)
{
    m_Dom_id = value;
}

inline
CStRpsNode_Base::TDom_id& CStRpsNode_Base::SetDom_id(void)
{
    return m_Dom_id;
}

inline
bool CStRpsNode_Base::IsSetCdd_id(void) const
{
    return m_set_Cdd_id;
}

inline
void CStRpsNode_Base::ResetCdd_id(void)
{
    m_Cdd_id = 0;
    m_set_Cdd_id = false;
}

inline
const CStRpsNode_Base::TCdd_id& CStRpsNode_Base::GetCdd_id(void) const
{
    return m_Cdd_id;
}

inline
void CStRpsNode_Base::SetCdd_id(const TCdd_id& value)
{
    m_Cdd_id = value;
    m_set_Cdd_id = true;
}

inline
CStRpsNode_Base::TCdd_id& CStRpsNode_Base::SetCdd_id(void)
{
    m_set_Cdd_id = true;
    return m_Cdd_id;
}

inline
void CStRpsNode_Base::ResetFrom(void)
{
    m_From = 0;
}

inline
const CStRpsNode_Base::TFrom& CStRpsNode_Base::GetFrom(void) const
{
    return m_From;
}

inline
void CStRpsNode_Base::SetFrom(const TFrom& value)
{
    m_From = value;
}

inline
CStRpsNode_Base::TFrom& CStRpsNode_Base::SetFrom(void)
{
    return m_From;
}

inline
void CStRpsNode_Base::ResetLen(void)
{
    m_Len = 0;
}

inline
const CStRpsNode_Base::TLen& CStRpsNode_Base::GetLen(void) const
{
    return m_Len;
}

inline
void CStRpsNode_Base::SetLen(const TLen& value)
{
    m_Len = value;
}

inline
CStRpsNode_Base::TLen& CStRpsNode_Base::SetLen(void)
{
    return m_Len;
}

inline
bool CStRpsNode_Base::IsSetScore(void) const
{
    return m_set_Score;
}

inline
void CStRpsNode_Base::ResetScore(void)
{
    m_Score = 0;
    m_set_Score = false;
}

inline
const CStRpsNode_Base::TScore& CStRpsNode_Base::GetScore(void) const
{
    return m_Score;
}

inline
void CStRpsNode_Base::SetScore(const TScore& value)
{
    m_Score = value;
    m_set_Score = true;
}

inline
CStRpsNode_Base::TScore& CStRpsNode_Base::SetScore(void)
{
    m_set_Score = true;
    return m_Score;
}

inline
void CStRpsNode_Base::ResetEvalue(void)
{
    m_Evalue = 0;
}

inline
const CStRpsNode_Base::TEvalue& CStRpsNode_Base::GetEvalue(void) const
{
    return m_Evalue;
}

inline
void CStRpsNode_Base::SetEvalue(const TEvalue& value)
{
    m_Evalue = value;
}

inline
CStRpsNode_Base::TEvalue& CStRpsNode_Base::SetEvalue(void)
{
    return m_Evalue;
}

inline
bool CStRpsNode_Base::IsSetBitscore(void) const
{
    return m_set_Bitscore;
}

inline
void CStRpsNode_Base::ResetBitscore(void)
{
    m_Bitscore = 0;
    m_set_Bitscore = false;
}

inline
const CStRpsNode_Base::TBitscore& CStRpsNode_Base::GetBitscore(void) const
{
    return m_Bitscore;
}

inline
void CStRpsNode_Base::SetBitscore(const TBitscore& value)
{
    m_Bitscore = value;
    m_set_Bitscore = true;
}

inline
CStRpsNode_Base::TBitscore& CStRpsNode_Base::SetBitscore(void)
{
    m_set_Bitscore = true;
    return m_Bitscore;
}

inline
void CStRpsNode_Base::ResetN_missing(void)
{
    m_N_missing = 0;
}

inline
const CStRpsNode_Base::TN_missing& CStRpsNode_Base::GetN_missing(void) const
{
    return m_N_missing;
}

inline
void CStRpsNode_Base::SetN_missing(const TN_missing& value)
{
    m_N_missing = value;
}

inline
CStRpsNode_Base::TN_missing& CStRpsNode_Base::SetN_missing(void)
{
    return m_N_missing;
}

inline
void CStRpsNode_Base::ResetC_missing(void)
{
    m_C_missing = 0;
}

inline
const CStRpsNode_Base::TC_missing& CStRpsNode_Base::GetC_missing(void) const
{
    return m_C_missing;
}

inline
void CStRpsNode_Base::SetC_missing(const TC_missing& value)
{
    m_C_missing = value;
}

inline
CStRpsNode_Base::TC_missing& CStRpsNode_Base::SetC_missing(void)
{
    return m_C_missing;
}

inline
void CStRpsNode_Base::ResetNum_of_dom(void)
{
    m_Num_of_dom = 0;
}

inline
const CStRpsNode_Base::TNum_of_dom& CStRpsNode_Base::GetNum_of_dom(void) const
{
    return m_Num_of_dom;
}

inline
void CStRpsNode_Base::SetNum_of_dom(const TNum_of_dom& value)
{
    m_Num_of_dom = value;
}

inline
CStRpsNode_Base::TNum_of_dom& CStRpsNode_Base::SetNum_of_dom(void)
{
    return m_Num_of_dom;
}

inline
void CStRedundNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStRedundNode_Base::TGi& CStRedundNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStRedundNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStRedundNode_Base::TGi& CStRedundNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
void CStRedundNode_Base::ResetOrdinal(void)
{
    m_Ordinal = 0;
}

inline
const CStRedundNode_Base::TOrdinal& CStRedundNode_Base::GetOrdinal(void) const
{
    return m_Ordinal;
}

inline
void CStRedundNode_Base::SetOrdinal(const TOrdinal& value)
{
    m_Ordinal = value;
}

inline
CStRedundNode_Base::TOrdinal& CStRedundNode_Base::SetOrdinal(void)
{
    return m_Ordinal;
}

inline
void CStRedundNode_Base::ResetGroup(void)
{
    m_Group = 0;
}

inline
const CStRedundNode_Base::TGroup& CStRedundNode_Base::GetGroup(void) const
{
    return m_Group;
}

inline
void CStRedundNode_Base::SetGroup(const TGroup& value)
{
    m_Group = value;
}

inline
CStRedundNode_Base::TGroup& CStRedundNode_Base::SetGroup(void)
{
    return m_Group;
}

inline
const CStRedund_Base::Tdata& CStRedund_Base::Get(void) const
{
    return m_data;
}

inline
CStRedund_Base::Tdata& CStRedund_Base::Set(void)
{
    return m_data;
}

inline
CStRedund_Base::operator const CStRedund_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStRedund_Base::operator CStRedund_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStPubseqNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStPubseqNode_Base::TGi& CStPubseqNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStPubseqNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStPubseqNode_Base::TGi& CStPubseqNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
void CStPubseqNode_Base::ResetMuid(void)
{
    m_Muid = 0;
}

inline
const CStPubseqNode_Base::TMuid& CStPubseqNode_Base::GetMuid(void) const
{
    return m_Muid;
}

inline
void CStPubseqNode_Base::SetMuid(const TMuid& value)
{
    m_Muid = value;
}

inline
CStPubseqNode_Base::TMuid& CStPubseqNode_Base::SetMuid(void)
{
    return m_Muid;
}

inline
void CStPubseqNode_Base::ResetPmid(void)
{
    m_Pmid = 0;
}

inline
const CStPubseqNode_Base::TPmid& CStPubseqNode_Base::GetPmid(void) const
{
    return m_Pmid;
}

inline
void CStPubseqNode_Base::SetPmid(const TPmid& value)
{
    m_Pmid = value;
}

inline
CStPubseqNode_Base::TPmid& CStPubseqNode_Base::SetPmid(void)
{
    return m_Pmid;
}

inline
const CStPubseq_Base::Tdata& CStPubseq_Base::Get(void) const
{
    return m_data;
}

inline
CStPubseq_Base::Tdata& CStPubseq_Base::Set(void)
{
    return m_data;
}

inline
CStPubseq_Base::operator const CStPubseq_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStPubseq_Base::operator CStPubseq_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStPartiNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStPartiNode_Base::TGi& CStPartiNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStPartiNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStPartiNode_Base::TGi& CStPartiNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
const CStPartiNode_Base::TPartition& CStPartiNode_Base::GetPartition(void) const
{
    return m_Partition;
}

inline
void CStPartiNode_Base::SetPartition(const TPartition& value)
{
    m_Partition = value;
}

inline
CStPartiNode_Base::TPartition& CStPartiNode_Base::SetPartition(void)
{
    return m_Partition;
}

inline
const CStParti_Base::Tdata& CStParti_Base::Get(void) const
{
    return m_data;
}

inline
CStParti_Base::Tdata& CStParti_Base::Set(void)
{
    return m_data;
}

inline
CStParti_Base::operator const CStParti_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStParti_Base::operator CStParti_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStOMIMdbNode_Base::ResetNpid(void)
{
    m_Npid = 0;
}

inline
const CStOMIMdbNode_Base::TNpid& CStOMIMdbNode_Base::GetNpid(void) const
{
    return m_Npid;
}

inline
void CStOMIMdbNode_Base::SetNpid(const TNpid& value)
{
    m_Npid = value;
}

inline
CStOMIMdbNode_Base::TNpid& CStOMIMdbNode_Base::SetNpid(void)
{
    return m_Npid;
}

inline
void CStOMIMdbNode_Base::ResetOmimid(void)
{
    m_Omimid = 0;
}

inline
const CStOMIMdbNode_Base::TOmimid& CStOMIMdbNode_Base::GetOmimid(void) const
{
    return m_Omimid;
}

inline
void CStOMIMdbNode_Base::SetOmimid(const TOmimid& value)
{
    m_Omimid = value;
}

inline
CStOMIMdbNode_Base::TOmimid& CStOMIMdbNode_Base::SetOmimid(void)
{
    return m_Omimid;
}

inline
const CStOMIMdb_Base::Tdata& CStOMIMdb_Base::Get(void) const
{
    return m_data;
}

inline
CStOMIMdb_Base::Tdata& CStOMIMdb_Base::Set(void)
{
    return m_data;
}

inline
CStOMIMdb_Base::operator const CStOMIMdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStOMIMdb_Base::operator CStOMIMdb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStNucprotNode_Base::ResetGin(void)
{
    m_Gin = 0;
}

inline
const CStNucprotNode_Base::TGin& CStNucprotNode_Base::GetGin(void) const
{
    return m_Gin;
}

inline
void CStNucprotNode_Base::SetGin(const TGin& value)
{
    m_Gin = value;
}

inline
CStNucprotNode_Base::TGin& CStNucprotNode_Base::SetGin(void)
{
    return m_Gin;
}

inline
void CStNucprotNode_Base::ResetGia(void)
{
    m_Gia = 0;
}

inline
const CStNucprotNode_Base::TGia& CStNucprotNode_Base::GetGia(void) const
{
    return m_Gia;
}

inline
void CStNucprotNode_Base::SetGia(const TGia& value)
{
    m_Gia = value;
}

inline
CStNucprotNode_Base::TGia& CStNucprotNode_Base::SetGia(void)
{
    return m_Gia;
}

inline
const CStNucprot_Base::Tdata& CStNucprot_Base::Get(void) const
{
    return m_data;
}

inline
CStNucprot_Base::Tdata& CStNucprot_Base::Set(void)
{
    return m_data;
}

inline
CStNucprot_Base::operator const CStNucprot_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStNucprot_Base::operator CStNucprot_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStMmgiNode_Base::ResetMmdbid(void)
{
    m_Mmdbid = 0;
}

inline
const CStMmgiNode_Base::TMmdbid& CStMmgiNode_Base::GetMmdbid(void) const
{
    return m_Mmdbid;
}

inline
void CStMmgiNode_Base::SetMmdbid(const TMmdbid& value)
{
    m_Mmdbid = value;
}

inline
CStMmgiNode_Base::TMmdbid& CStMmgiNode_Base::SetMmdbid(void)
{
    return m_Mmdbid;
}

inline
void CStMmgiNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStMmgiNode_Base::TGi& CStMmgiNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStMmgiNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStMmgiNode_Base::TGi& CStMmgiNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
const CStMmgi_Base::Tdata& CStMmgi_Base::Get(void) const
{
    return m_data;
}

inline
CStMmgi_Base::Tdata& CStMmgi_Base::Set(void)
{
    return m_data;
}

inline
CStMmgi_Base::operator const CStMmgi_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStMmgi_Base::operator CStMmgi_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStMmdbNode_Base::ResetMmdbid(void)
{
    m_Mmdbid = 0;
}

inline
const CStMmdbNode_Base::TMmdbid& CStMmdbNode_Base::GetMmdbid(void) const
{
    return m_Mmdbid;
}

inline
void CStMmdbNode_Base::SetMmdbid(const TMmdbid& value)
{
    m_Mmdbid = value;
}

inline
CStMmdbNode_Base::TMmdbid& CStMmdbNode_Base::SetMmdbid(void)
{
    return m_Mmdbid;
}

inline
const CStMmdbNode_Base::TPdbid& CStMmdbNode_Base::GetPdbid(void) const
{
    return m_Pdbid;
}

inline
void CStMmdbNode_Base::SetPdbid(const TPdbid& value)
{
    m_Pdbid = value;
}

inline
CStMmdbNode_Base::TPdbid& CStMmdbNode_Base::SetPdbid(void)
{
    return m_Pdbid;
}

inline
CStMmdbNode_Base::TAsn1& CStMmdbNode_Base::SetAsn1(void)
{
    return (*m_Asn1);
}

inline
void CStMmdbNode_Base::ResetBwhat(void)
{
    m_Bwhat = 0;
}

inline
const CStMmdbNode_Base::TBwhat& CStMmdbNode_Base::GetBwhat(void) const
{
    return m_Bwhat;
}

inline
void CStMmdbNode_Base::SetBwhat(const TBwhat& value)
{
    m_Bwhat = value;
}

inline
CStMmdbNode_Base::TBwhat& CStMmdbNode_Base::SetBwhat(void)
{
    return m_Bwhat;
}

inline
void CStMmdbNode_Base::ResetModels(void)
{
    m_Models = 0;
}

inline
const CStMmdbNode_Base::TModels& CStMmdbNode_Base::GetModels(void) const
{
    return m_Models;
}

inline
void CStMmdbNode_Base::SetModels(const TModels& value)
{
    m_Models = value;
}

inline
CStMmdbNode_Base::TModels& CStMmdbNode_Base::SetModels(void)
{
    return m_Models;
}

inline
void CStMmdbNode_Base::ResetMolecules(void)
{
    m_Molecules = 0;
}

inline
const CStMmdbNode_Base::TMolecules& CStMmdbNode_Base::GetMolecules(void) const
{
    return m_Molecules;
}

inline
void CStMmdbNode_Base::SetMolecules(const TMolecules& value)
{
    m_Molecules = value;
}

inline
CStMmdbNode_Base::TMolecules& CStMmdbNode_Base::SetMolecules(void)
{
    return m_Molecules;
}

inline
void CStMmdbNode_Base::ResetSize(void)
{
    m_Size = 0;
}

inline
const CStMmdbNode_Base::TSize& CStMmdbNode_Base::GetSize(void) const
{
    return m_Size;
}

inline
void CStMmdbNode_Base::SetSize(const TSize& value)
{
    m_Size = value;
}

inline
CStMmdbNode_Base::TSize& CStMmdbNode_Base::SetSize(void)
{
    return m_Size;
}

inline
void CStMmdbNode_Base::ResetBzsize(void)
{
    m_Bzsize = 0;
}

inline
const CStMmdbNode_Base::TBzsize& CStMmdbNode_Base::GetBzsize(void) const
{
    return m_Bzsize;
}

inline
void CStMmdbNode_Base::SetBzsize(const TBzsize& value)
{
    m_Bzsize = value;
}

inline
CStMmdbNode_Base::TBzsize& CStMmdbNode_Base::SetBzsize(void)
{
    return m_Bzsize;
}

inline
const CStMmdb_Base::Tdata& CStMmdb_Base::Get(void) const
{
    return m_data;
}

inline
CStMmdb_Base::Tdata& CStMmdb_Base::Set(void)
{
    return m_data;
}

inline
CStMmdb_Base::operator const CStMmdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStMmdb_Base::operator CStMmdb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStLLdbNode_Base::ResetNpid(void)
{
    m_Npid = 0;
}

inline
const CStLLdbNode_Base::TNpid& CStLLdbNode_Base::GetNpid(void) const
{
    return m_Npid;
}

inline
void CStLLdbNode_Base::SetNpid(const TNpid& value)
{
    m_Npid = value;
}

inline
CStLLdbNode_Base::TNpid& CStLLdbNode_Base::SetNpid(void)
{
    return m_Npid;
}

inline
void CStLLdbNode_Base::ResetLlid(void)
{
    m_Llid = 0;
}

inline
const CStLLdbNode_Base::TLlid& CStLLdbNode_Base::GetLlid(void) const
{
    return m_Llid;
}

inline
void CStLLdbNode_Base::SetLlid(const TLlid& value)
{
    m_Llid = value;
}

inline
CStLLdbNode_Base::TLlid& CStLLdbNode_Base::SetLlid(void)
{
    return m_Llid;
}

inline
const CStLLdbNode_Base::TMap& CStLLdbNode_Base::GetMap(void) const
{
    return m_Map;
}

inline
void CStLLdbNode_Base::SetMap(const TMap& value)
{
    m_Map = value;
}

inline
CStLLdbNode_Base::TMap& CStLLdbNode_Base::SetMap(void)
{
    return m_Map;
}

inline
const CStLLdb_Base::Tdata& CStLLdb_Base::Get(void) const
{
    return m_data;
}

inline
CStLLdb_Base::Tdata& CStLLdb_Base::Set(void)
{
    return m_data;
}

inline
CStLLdb_Base::operator const CStLLdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStLLdb_Base::operator CStLLdb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStHistdbNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStHistdbNode_Base::TGi& CStHistdbNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStHistdbNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStHistdbNode_Base::TGi& CStHistdbNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
const CStHistdbNode_Base::TAccession& CStHistdbNode_Base::GetAccession(void) const
{
    return m_Accession;
}

inline
void CStHistdbNode_Base::SetAccession(const TAccession& value)
{
    m_Accession = value;
}

inline
CStHistdbNode_Base::TAccession& CStHistdbNode_Base::SetAccession(void)
{
    return m_Accession;
}

inline
void CStHistdbNode_Base::ResetVersion(void)
{
    m_Version = 0;
}

inline
const CStHistdbNode_Base::TVersion& CStHistdbNode_Base::GetVersion(void) const
{
    return m_Version;
}

inline
void CStHistdbNode_Base::SetVersion(const TVersion& value)
{
    m_Version = value;
}

inline
CStHistdbNode_Base::TVersion& CStHistdbNode_Base::SetVersion(void)
{
    return m_Version;
}

inline
const CStHistdbNode_Base::TDate& CStHistdbNode_Base::GetDate(void) const
{
    return m_Date;
}

inline
void CStHistdbNode_Base::SetDate(const TDate& value)
{
    m_Date = value;
}

inline
CStHistdbNode_Base::TDate& CStHistdbNode_Base::SetDate(void)
{
    return m_Date;
}

inline
void CStHistdbNode_Base::ResetAction(void)
{
    m_Action = 0;
}

inline
const CStHistdbNode_Base::TAction& CStHistdbNode_Base::GetAction(void) const
{
    return m_Action;
}

inline
void CStHistdbNode_Base::SetAction(const TAction& value)
{
    m_Action = value;
}

inline
CStHistdbNode_Base::TAction& CStHistdbNode_Base::SetAction(void)
{
    return m_Action;
}

inline
const CStHistdb_Base::Tdata& CStHistdb_Base::Get(void) const
{
    return m_data;
}

inline
CStHistdb_Base::Tdata& CStHistdb_Base::Set(void)
{
    return m_data;
}

inline
CStHistdb_Base::operator const CStHistdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStHistdb_Base::operator CStHistdb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStGOdbNode_Base::ResetNpid(void)
{
    m_Npid = 0;
}

inline
const CStGOdbNode_Base::TNpid& CStGOdbNode_Base::GetNpid(void) const
{
    return m_Npid;
}

inline
void CStGOdbNode_Base::SetNpid(const TNpid& value)
{
    m_Npid = value;
}

inline
CStGOdbNode_Base::TNpid& CStGOdbNode_Base::SetNpid(void)
{
    return m_Npid;
}

inline
void CStGOdbNode_Base::ResetGoid(void)
{
    m_Goid = 0;
}

inline
const CStGOdbNode_Base::TGoid& CStGOdbNode_Base::GetGoid(void) const
{
    return m_Goid;
}

inline
void CStGOdbNode_Base::SetGoid(const TGoid& value)
{
    m_Goid = value;
}

inline
CStGOdbNode_Base::TGoid& CStGOdbNode_Base::SetGoid(void)
{
    return m_Goid;
}

inline
void CStGOdbNode_Base::ResetPmid(void)
{
    m_Pmid = 0;
}

inline
const CStGOdbNode_Base::TPmid& CStGOdbNode_Base::GetPmid(void) const
{
    return m_Pmid;
}

inline
void CStGOdbNode_Base::SetPmid(const TPmid& value)
{
    m_Pmid = value;
}

inline
CStGOdbNode_Base::TPmid& CStGOdbNode_Base::SetPmid(void)
{
    return m_Pmid;
}

inline
const CStGOdbNode_Base::TEviCode& CStGOdbNode_Base::GetEviCode(void) const
{
    return m_EviCode;
}

inline
void CStGOdbNode_Base::SetEviCode(const TEviCode& value)
{
    m_EviCode = value;
}

inline
CStGOdbNode_Base::TEviCode& CStGOdbNode_Base::SetEviCode(void)
{
    return m_EviCode;
}

inline
const CStGOdb_Base::Tdata& CStGOdb_Base::Get(void) const
{
    return m_data;
}

inline
CStGOdb_Base::Tdata& CStGOdb_Base::Set(void)
{
    return m_data;
}

inline
CStGOdb_Base::operator const CStGOdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStGOdb_Base::operator CStGOdb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStDomdbNode_Base::ResetMmdbid(void)
{
    m_Mmdbid = 0;
}

inline
const CStDomdbNode_Base::TMmdbid& CStDomdbNode_Base::GetMmdbid(void) const
{
    return m_Mmdbid;
}

inline
void CStDomdbNode_Base::SetMmdbid(const TMmdbid& value)
{
    m_Mmdbid = value;
}

inline
CStDomdbNode_Base::TMmdbid& CStDomdbNode_Base::SetMmdbid(void)
{
    return m_Mmdbid;
}

inline
CStDomdbNode_Base::TAsn1& CStDomdbNode_Base::SetAsn1(void)
{
    return (*m_Asn1);
}

inline
const CStDomdbNode_Base::TPdbid& CStDomdbNode_Base::GetPdbid(void) const
{
    return m_Pdbid;
}

inline
void CStDomdbNode_Base::SetPdbid(const TPdbid& value)
{
    m_Pdbid = value;
}

inline
CStDomdbNode_Base::TPdbid& CStDomdbNode_Base::SetPdbid(void)
{
    return m_Pdbid;
}

inline
const CStDomdbNode_Base::TChain& CStDomdbNode_Base::GetChain(void) const
{
    return m_Chain;
}

inline
void CStDomdbNode_Base::SetChain(const TChain& value)
{
    m_Chain = value;
}

inline
CStDomdbNode_Base::TChain& CStDomdbNode_Base::SetChain(void)
{
    return m_Chain;
}

inline
void CStDomdbNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStDomdbNode_Base::TGi& CStDomdbNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStDomdbNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStDomdbNode_Base::TGi& CStDomdbNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
void CStDomdbNode_Base::ResetDomno(void)
{
    m_Domno = 0;
}

inline
const CStDomdbNode_Base::TDomno& CStDomdbNode_Base::GetDomno(void) const
{
    return m_Domno;
}

inline
void CStDomdbNode_Base::SetDomno(const TDomno& value)
{
    m_Domno = value;
}

inline
CStDomdbNode_Base::TDomno& CStDomdbNode_Base::SetDomno(void)
{
    return m_Domno;
}

inline
void CStDomdbNode_Base::ResetDomall(void)
{
    m_Domall = 0;
}

inline
const CStDomdbNode_Base::TDomall& CStDomdbNode_Base::GetDomall(void) const
{
    return m_Domall;
}

inline
void CStDomdbNode_Base::SetDomall(const TDomall& value)
{
    m_Domall = value;
}

inline
CStDomdbNode_Base::TDomall& CStDomdbNode_Base::SetDomall(void)
{
    return m_Domall;
}

inline
void CStDomdbNode_Base::ResetDomid(void)
{
    m_Domid = 0;
}

inline
const CStDomdbNode_Base::TDomid& CStDomdbNode_Base::GetDomid(void) const
{
    return m_Domid;
}

inline
void CStDomdbNode_Base::SetDomid(const TDomid& value)
{
    m_Domid = value;
}

inline
CStDomdbNode_Base::TDomid& CStDomdbNode_Base::SetDomid(void)
{
    return m_Domid;
}

inline
void CStDomdbNode_Base::ResetRep(void)
{
    m_Rep = 0;
}

inline
const CStDomdbNode_Base::TRep& CStDomdbNode_Base::GetRep(void) const
{
    return m_Rep;
}

inline
void CStDomdbNode_Base::SetRep(const TRep& value)
{
    m_Rep = value;
}

inline
CStDomdbNode_Base::TRep& CStDomdbNode_Base::SetRep(void)
{
    return m_Rep;
}

inline
const CStDomdb_Base::Tdata& CStDomdb_Base::Get(void) const
{
    return m_data;
}

inline
CStDomdb_Base::Tdata& CStDomdb_Base::Set(void)
{
    return m_data;
}

inline
CStDomdb_Base::operator const CStDomdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStDomdb_Base::operator CStDomdb_Base::Tdata& (void)
{
    return m_data;
}

inline
const CStDomNamedb_Base::Tdata& CStDomNamedb_Base::Get(void) const
{
    return m_data;
}

inline
CStDomNamedb_Base::Tdata& CStDomNamedb_Base::Set(void)
{
    return m_data;
}

inline
CStDomNamedb_Base::operator const CStDomNamedb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStDomNamedb_Base::operator CStDomNamedb_Base::Tdata& (void)
{
    return m_data;
}

inline
const CStDomNameNode_Base::TAccession& CStDomNameNode_Base::GetAccession(void) const
{
    return m_Accession;
}

inline
void CStDomNameNode_Base::SetAccession(const TAccession& value)
{
    m_Accession = value;
}

inline
CStDomNameNode_Base::TAccession& CStDomNameNode_Base::SetAccession(void)
{
    return m_Accession;
}

inline
const CStDomNameNode_Base::TName& CStDomNameNode_Base::GetName(void) const
{
    return m_Name;
}

inline
void CStDomNameNode_Base::SetName(const TName& value)
{
    m_Name = value;
}

inline
CStDomNameNode_Base::TName& CStDomNameNode_Base::SetName(void)
{
    return m_Name;
}

inline
bool CStDomNameNode_Base::IsSetPdb_id(void) const
{
    return m_set_Pdb_id;
}

inline
const CStDomNameNode_Base::TPdb_id& CStDomNameNode_Base::GetPdb_id(void) const
{
    return m_Pdb_id;
}

inline
void CStDomNameNode_Base::SetPdb_id(const TPdb_id& value)
{
    m_Pdb_id = value;
    m_set_Pdb_id = true;
}

inline
CStDomNameNode_Base::TPdb_id& CStDomNameNode_Base::SetPdb_id(void)
{
    m_set_Pdb_id = true;
    return m_Pdb_id;
}

inline
CStDomNameNode_Base::TAsn1& CStDomNameNode_Base::SetAsn1(void)
{
    return (*m_Asn1);
}

inline
void CStChromNode_Base::ResetTaxid(void)
{
    m_Taxid = 0;
}

inline
const CStChromNode_Base::TTaxid& CStChromNode_Base::GetTaxid(void) const
{
    return m_Taxid;
}

inline
void CStChromNode_Base::SetTaxid(const TTaxid& value)
{
    m_Taxid = value;
}

inline
CStChromNode_Base::TTaxid& CStChromNode_Base::SetTaxid(void)
{
    return m_Taxid;
}

inline
void CStChromNode_Base::ResetKloodge(void)
{
    m_Kloodge = 0;
}

inline
const CStChromNode_Base::TKloodge& CStChromNode_Base::GetKloodge(void) const
{
    return m_Kloodge;
}

inline
void CStChromNode_Base::SetKloodge(const TKloodge& value)
{
    m_Kloodge = value;
}

inline
CStChromNode_Base::TKloodge& CStChromNode_Base::SetKloodge(void)
{
    return m_Kloodge;
}

inline
void CStChromNode_Base::ResetChromfl(void)
{
    m_Chromfl = 0;
}

inline
const CStChromNode_Base::TChromfl& CStChromNode_Base::GetChromfl(void) const
{
    return m_Chromfl;
}

inline
void CStChromNode_Base::SetChromfl(const TChromfl& value)
{
    m_Chromfl = value;
}

inline
CStChromNode_Base::TChromfl& CStChromNode_Base::SetChromfl(void)
{
    return m_Chromfl;
}

inline
const CStChromNode_Base::TAccess& CStChromNode_Base::GetAccess(void) const
{
    return m_Access;
}

inline
void CStChromNode_Base::SetAccess(const TAccess& value)
{
    m_Access = value;
}

inline
CStChromNode_Base::TAccess& CStChromNode_Base::SetAccess(void)
{
    return m_Access;
}

inline
const CStChromNode_Base::TName& CStChromNode_Base::GetName(void) const
{
    return m_Name;
}

inline
void CStChromNode_Base::SetName(const TName& value)
{
    m_Name = value;
}

inline
CStChromNode_Base::TName& CStChromNode_Base::SetName(void)
{
    return m_Name;
}

inline
const CStChrom_Base::Tdata& CStChrom_Base::Get(void) const
{
    return m_data;
}

inline
CStChrom_Base::Tdata& CStChrom_Base::Set(void)
{
    return m_data;
}

inline
CStChrom_Base::operator const CStChrom_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStChrom_Base::operator CStChrom_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStCddbNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStCddbNode_Base::TGi& CStCddbNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStCddbNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStCddbNode_Base::TGi& CStCddbNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
CStCddbNode_Base::TAsn1& CStCddbNode_Base::SetAsn1(void)
{
    return (*m_Asn1);
}

inline
const CStCddb_Base::Tdata& CStCddb_Base::Get(void) const
{
    return m_data;
}

inline
CStCddb_Base::Tdata& CStCddb_Base::Set(void)
{
    return m_data;
}

inline
CStCddb_Base::operator const CStCddb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStCddb_Base::operator CStCddb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStCDDdbNode_Base::ResetNpid(void)
{
    m_Npid = 0;
}

inline
const CStCDDdbNode_Base::TNpid& CStCDDdbNode_Base::GetNpid(void) const
{
    return m_Npid;
}

inline
void CStCDDdbNode_Base::SetNpid(const TNpid& value)
{
    m_Npid = value;
}

inline
CStCDDdbNode_Base::TNpid& CStCDDdbNode_Base::SetNpid(void)
{
    return m_Npid;
}

inline
const CStCDDdbNode_Base::TCddid& CStCDDdbNode_Base::GetCddid(void) const
{
    return m_Cddid;
}

inline
void CStCDDdbNode_Base::SetCddid(const TCddid& value)
{
    m_Cddid = value;
}

inline
CStCDDdbNode_Base::TCddid& CStCDDdbNode_Base::SetCddid(void)
{
    return m_Cddid;
}

inline
void CStCDDdbNode_Base::ResetEValue(void)
{
    m_EValue = 0;
}

inline
const CStCDDdbNode_Base::TEValue& CStCDDdbNode_Base::GetEValue(void) const
{
    return m_EValue;
}

inline
void CStCDDdbNode_Base::SetEValue(const TEValue& value)
{
    m_EValue = value;
}

inline
CStCDDdbNode_Base::TEValue& CStCDDdbNode_Base::SetEValue(void)
{
    return m_EValue;
}

inline
const CStCDDdb_Base::Tdata& CStCDDdb_Base::Get(void) const
{
    return m_data;
}

inline
CStCDDdb_Base::Tdata& CStCDDdb_Base::Set(void)
{
    return m_data;
}

inline
CStCDDdb_Base::operator const CStCDDdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStCDDdb_Base::operator CStCDDdb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStAsndbNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStAsndbNode_Base::TGi& CStAsndbNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStAsndbNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStAsndbNode_Base::TGi& CStAsndbNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
CStAsndbNode_Base::TAsn1& CStAsndbNode_Base::SetAsn1(void)
{
    return (*m_Asn1);
}

inline
const CStAsndbNode_Base::TDivision& CStAsndbNode_Base::GetDivision(void) const
{
    return m_Division;
}

inline
void CStAsndbNode_Base::SetDivision(const TDivision& value)
{
    m_Division = value;
}

inline
CStAsndbNode_Base::TDivision& CStAsndbNode_Base::SetDivision(void)
{
    return m_Division;
}

inline
const CStAsndbNode_Base::TRelease& CStAsndbNode_Base::GetRelease(void) const
{
    return m_Release;
}

inline
void CStAsndbNode_Base::SetRelease(const TRelease& value)
{
    m_Release = value;
}

inline
CStAsndbNode_Base::TRelease& CStAsndbNode_Base::SetRelease(void)
{
    return m_Release;
}

inline
const CStAsndbNode_Base::TType& CStAsndbNode_Base::GetType(void) const
{
    return m_Type;
}

inline
void CStAsndbNode_Base::SetType(const TType& value)
{
    m_Type = value;
}

inline
CStAsndbNode_Base::TType& CStAsndbNode_Base::SetType(void)
{
    return m_Type;
}

inline
const CStAsndb_Base::Tdata& CStAsndb_Base::Get(void) const
{
    return m_data;
}

inline
CStAsndb_Base::Tdata& CStAsndb_Base::Set(void)
{
    return m_data;
}

inline
CStAsndb_Base::operator const CStAsndb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStAsndb_Base::operator CStAsndb_Base::Tdata& (void)
{
    return m_data;
}

inline
void CStAccdbNode_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CStAccdbNode_Base::TGi& CStAccdbNode_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CStAccdbNode_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CStAccdbNode_Base::TGi& CStAccdbNode_Base::SetGi(void)
{
    return m_Gi;
}

inline
const CStAccdbNode_Base::TDb& CStAccdbNode_Base::GetDb(void) const
{
    return m_Db;
}

inline
void CStAccdbNode_Base::SetDb(const TDb& value)
{
    m_Db = value;
}

inline
CStAccdbNode_Base::TDb& CStAccdbNode_Base::SetDb(void)
{
    return m_Db;
}

inline
const CStAccdbNode_Base::TName& CStAccdbNode_Base::GetName(void) const
{
    return m_Name;
}

inline
void CStAccdbNode_Base::SetName(const TName& value)
{
    m_Name = value;
}

inline
CStAccdbNode_Base::TName& CStAccdbNode_Base::SetName(void)
{
    return m_Name;
}

inline
const CStAccdbNode_Base::TAccess& CStAccdbNode_Base::GetAccess(void) const
{
    return m_Access;
}

inline
void CStAccdbNode_Base::SetAccess(const TAccess& value)
{
    m_Access = value;
}

inline
CStAccdbNode_Base::TAccess& CStAccdbNode_Base::SetAccess(void)
{
    return m_Access;
}

inline
const CStAccdbNode_Base::TChain& CStAccdbNode_Base::GetChain(void) const
{
    return m_Chain;
}

inline
void CStAccdbNode_Base::SetChain(const TChain& value)
{
    m_Chain = value;
}

inline
CStAccdbNode_Base::TChain& CStAccdbNode_Base::SetChain(void)
{
    return m_Chain;
}

inline
const CStAccdbNode_Base::TRelease& CStAccdbNode_Base::GetRelease(void) const
{
    return m_Release;
}

inline
void CStAccdbNode_Base::SetRelease(const TRelease& value)
{
    m_Release = value;
}

inline
CStAccdbNode_Base::TRelease& CStAccdbNode_Base::SetRelease(void)
{
    return m_Release;
}

inline
void CStAccdbNode_Base::ResetVersion(void)
{
    m_Version = 0;
}

inline
const CStAccdbNode_Base::TVersion& CStAccdbNode_Base::GetVersion(void) const
{
    return m_Version;
}

inline
void CStAccdbNode_Base::SetVersion(const TVersion& value)
{
    m_Version = value;
}

inline
CStAccdbNode_Base::TVersion& CStAccdbNode_Base::SetVersion(void)
{
    return m_Version;
}

inline
const CStAccdbNode_Base::TTitle& CStAccdbNode_Base::GetTitle(void) const
{
    return m_Title;
}

inline
void CStAccdbNode_Base::SetTitle(const TTitle& value)
{
    m_Title = value;
}

inline
CStAccdbNode_Base::TTitle& CStAccdbNode_Base::SetTitle(void)
{
    return m_Title;
}

inline
const CStAccdbNode_Base::TNamelow& CStAccdbNode_Base::GetNamelow(void) const
{
    return m_Namelow;
}

inline
void CStAccdbNode_Base::SetNamelow(const TNamelow& value)
{
    m_Namelow = value;
}

inline
CStAccdbNode_Base::TNamelow& CStAccdbNode_Base::SetNamelow(void)
{
    return m_Namelow;
}

inline
const CStAccdb_Base::Tdata& CStAccdb_Base::Get(void) const
{
    return m_data;
}

inline
CStAccdb_Base::Tdata& CStAccdb_Base::Set(void)
{
    return m_data;
}

inline
CStAccdb_Base::operator const CStAccdb_Base::Tdata& (void) const
{
    return m_data;
}

inline
CStAccdb_Base::operator CStAccdb_Base::Tdata& (void)
{
    return m_data;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_seqhound_SCOPE // namespace seqhound::


#endif // SLRISTRUC_BASE_HPP
