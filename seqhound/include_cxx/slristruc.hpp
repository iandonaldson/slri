/* $Id: slristruc.hpp,v 1.2 2003/09/29 22:18:49 haocl Exp $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * Author:  .......
 *
 * File Description:
 *   .......
 *
 * Remark:
 *   This code was originally generated by application DATATOOL
 *   using specifications from the data definition file
 *   'slristruc.asn'.
 */

#ifndef SLRISTRUC_HPP
#define SLRISTRUC_HPP


// generated includes
#include <slristruc_.hpp>

// generated classes

BEGIN_seqhound_SCOPE // namespace seqhound::

class CStTaxgiNode : public CStTaxgiNode_Base
{
    typedef CStTaxgiNode_Base Tparent;
public:
    // constructor
    CStTaxgiNode(void);
    // destructor
    ~CStTaxgiNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStTaxgiNode(const CStTaxgiNode& value);
    CStTaxgiNode& operator=(const CStTaxgiNode& value);

};



/////////////////// CStTaxgiNode inline methods

// constructor
inline
CStTaxgiNode::CStTaxgiNode(void)
{
}


/////////////////// end of CStTaxgiNode inline methods


class CStTaxgi : public CStTaxgi_Base
{
    typedef CStTaxgi_Base Tparent;
public:
    // constructor
    CStTaxgi(void);
    // destructor
    ~CStTaxgi(void);

private:
    // Prohibit copy constructor and assignment operator
    CStTaxgi(const CStTaxgi& value);
    CStTaxgi& operator=(const CStTaxgi& value);

};



/////////////////// CStTaxgi inline methods

// constructor
inline
CStTaxgi::CStTaxgi(void)
{
}


/////////////////// end of CStTaxgi inline methods


class CStSengiNode : public CStSengiNode_Base
{
    typedef CStSengiNode_Base Tparent;
public:
    // constructor
    CStSengiNode(void);
    // destructor
    ~CStSengiNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStSengiNode(const CStSengiNode& value);
    CStSengiNode& operator=(const CStSengiNode& value);

};



/////////////////// CStSengiNode inline methods

// constructor
inline
CStSengiNode::CStSengiNode(void)
{
}


/////////////////// end of CStSengiNode inline methods


class CStSengi : public CStSengi_Base
{
    typedef CStSengi_Base Tparent;
public:
    // constructor
    CStSengi(void);
    // destructor
    ~CStSengi(void);

private:
    // Prohibit copy constructor and assignment operator
    CStSengi(const CStSengi& value);
    CStSengi& operator=(const CStSengi& value);

};



/////////////////// CStSengi inline methods

// constructor
inline
CStSengi::CStSengi(void)
{
}


/////////////////// end of CStSengi inline methods


class CStSendbNode : public CStSendbNode_Base
{
    typedef CStSendbNode_Base Tparent;
public:
    // constructor
    CStSendbNode(void);
    // destructor
    ~CStSendbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStSendbNode(const CStSendbNode& value);
    CStSendbNode& operator=(const CStSendbNode& value);

};



/////////////////// CStSendbNode inline methods

// constructor
inline
CStSendbNode::CStSendbNode(void)
{
}


/////////////////// end of CStSendbNode inline methods


class CStSendb : public CStSendb_Base
{
    typedef CStSendb_Base Tparent;
public:
    // constructor
    CStSendb(void);
    // destructor
    ~CStSendb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStSendb(const CStSendb& value);
    CStSendb& operator=(const CStSendb& value);

};



/////////////////// CStSendb inline methods

// constructor
inline
CStSendb::CStSendb(void)
{
}


/////////////////// end of CStSendb inline methods


class CStRpsdb : public CStRpsdb_Base
{
    typedef CStRpsdb_Base Tparent;
public:
    // constructor
    CStRpsdb(void);
    // destructor
    ~CStRpsdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStRpsdb(const CStRpsdb& value);
    CStRpsdb& operator=(const CStRpsdb& value);

};



/////////////////// CStRpsdb inline methods

// constructor
inline
CStRpsdb::CStRpsdb(void)
{
}


/////////////////// end of CStRpsdb inline methods


class CStRpsNode : public CStRpsNode_Base
{
    typedef CStRpsNode_Base Tparent;
public:
    // constructor
    CStRpsNode(void);
    // destructor
    ~CStRpsNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStRpsNode(const CStRpsNode& value);
    CStRpsNode& operator=(const CStRpsNode& value);

};



/////////////////// CStRpsNode inline methods

// constructor
inline
CStRpsNode::CStRpsNode(void)
{
}


/////////////////// end of CStRpsNode inline methods


class CStRedundNode : public CStRedundNode_Base
{
    typedef CStRedundNode_Base Tparent;
public:
    // constructor
    CStRedundNode(void);
    // destructor
    ~CStRedundNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStRedundNode(const CStRedundNode& value);
    CStRedundNode& operator=(const CStRedundNode& value);

};



/////////////////// CStRedundNode inline methods

// constructor
inline
CStRedundNode::CStRedundNode(void)
{
}


/////////////////// end of CStRedundNode inline methods


class CStRedund : public CStRedund_Base
{
    typedef CStRedund_Base Tparent;
public:
    // constructor
    CStRedund(void);
    // destructor
    ~CStRedund(void);

private:
    // Prohibit copy constructor and assignment operator
    CStRedund(const CStRedund& value);
    CStRedund& operator=(const CStRedund& value);

};



/////////////////// CStRedund inline methods

// constructor
inline
CStRedund::CStRedund(void)
{
}


/////////////////// end of CStRedund inline methods


class CStPubseqNode : public CStPubseqNode_Base
{
    typedef CStPubseqNode_Base Tparent;
public:
    // constructor
    CStPubseqNode(void);
    // destructor
    ~CStPubseqNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStPubseqNode(const CStPubseqNode& value);
    CStPubseqNode& operator=(const CStPubseqNode& value);

};



/////////////////// CStPubseqNode inline methods

// constructor
inline
CStPubseqNode::CStPubseqNode(void)
{
}


/////////////////// end of CStPubseqNode inline methods


class CStPubseq : public CStPubseq_Base
{
    typedef CStPubseq_Base Tparent;
public:
    // constructor
    CStPubseq(void);
    // destructor
    ~CStPubseq(void);

private:
    // Prohibit copy constructor and assignment operator
    CStPubseq(const CStPubseq& value);
    CStPubseq& operator=(const CStPubseq& value);

};



/////////////////// CStPubseq inline methods

// constructor
inline
CStPubseq::CStPubseq(void)
{
}


/////////////////// end of CStPubseq inline methods


class CStPartiNode : public CStPartiNode_Base
{
    typedef CStPartiNode_Base Tparent;
public:
    // constructor
    CStPartiNode(void);
    // destructor
    ~CStPartiNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStPartiNode(const CStPartiNode& value);
    CStPartiNode& operator=(const CStPartiNode& value);

};



/////////////////// CStPartiNode inline methods

// constructor
inline
CStPartiNode::CStPartiNode(void)
{
}


/////////////////// end of CStPartiNode inline methods


class CStParti : public CStParti_Base
{
    typedef CStParti_Base Tparent;
public:
    // constructor
    CStParti(void);
    // destructor
    ~CStParti(void);

private:
    // Prohibit copy constructor and assignment operator
    CStParti(const CStParti& value);
    CStParti& operator=(const CStParti& value);

};



/////////////////// CStParti inline methods

// constructor
inline
CStParti::CStParti(void)
{
}


/////////////////// end of CStParti inline methods


class CStOMIMdbNode : public CStOMIMdbNode_Base
{
    typedef CStOMIMdbNode_Base Tparent;
public:
    // constructor
    CStOMIMdbNode(void);
    // destructor
    ~CStOMIMdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStOMIMdbNode(const CStOMIMdbNode& value);
    CStOMIMdbNode& operator=(const CStOMIMdbNode& value);

};



/////////////////// CStOMIMdbNode inline methods

// constructor
inline
CStOMIMdbNode::CStOMIMdbNode(void)
{
}


/////////////////// end of CStOMIMdbNode inline methods


class CStOMIMdb : public CStOMIMdb_Base
{
    typedef CStOMIMdb_Base Tparent;
public:
    // constructor
    CStOMIMdb(void);
    // destructor
    ~CStOMIMdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStOMIMdb(const CStOMIMdb& value);
    CStOMIMdb& operator=(const CStOMIMdb& value);

};



/////////////////// CStOMIMdb inline methods

// constructor
inline
CStOMIMdb::CStOMIMdb(void)
{
}


/////////////////// end of CStOMIMdb inline methods


class CStNucprotNode : public CStNucprotNode_Base
{
    typedef CStNucprotNode_Base Tparent;
public:
    // constructor
    CStNucprotNode(void);
    // destructor
    ~CStNucprotNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStNucprotNode(const CStNucprotNode& value);
    CStNucprotNode& operator=(const CStNucprotNode& value);

};



/////////////////// CStNucprotNode inline methods

// constructor
inline
CStNucprotNode::CStNucprotNode(void)
{
}


/////////////////// end of CStNucprotNode inline methods


class CStNucprot : public CStNucprot_Base
{
    typedef CStNucprot_Base Tparent;
public:
    // constructor
    CStNucprot(void);
    // destructor
    ~CStNucprot(void);

private:
    // Prohibit copy constructor and assignment operator
    CStNucprot(const CStNucprot& value);
    CStNucprot& operator=(const CStNucprot& value);

};



/////////////////// CStNucprot inline methods

// constructor
inline
CStNucprot::CStNucprot(void)
{
}


/////////////////// end of CStNucprot inline methods


class CStMmgiNode : public CStMmgiNode_Base
{
    typedef CStMmgiNode_Base Tparent;
public:
    // constructor
    CStMmgiNode(void);
    // destructor
    ~CStMmgiNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStMmgiNode(const CStMmgiNode& value);
    CStMmgiNode& operator=(const CStMmgiNode& value);

};



/////////////////// CStMmgiNode inline methods

// constructor
inline
CStMmgiNode::CStMmgiNode(void)
{
}


/////////////////// end of CStMmgiNode inline methods


class CStMmgi : public CStMmgi_Base
{
    typedef CStMmgi_Base Tparent;
public:
    // constructor
    CStMmgi(void);
    // destructor
    ~CStMmgi(void);

private:
    // Prohibit copy constructor and assignment operator
    CStMmgi(const CStMmgi& value);
    CStMmgi& operator=(const CStMmgi& value);

};



/////////////////// CStMmgi inline methods

// constructor
inline
CStMmgi::CStMmgi(void)
{
}


/////////////////// end of CStMmgi inline methods


class CStMmdbNode : public CStMmdbNode_Base
{
    typedef CStMmdbNode_Base Tparent;
public:
    // constructor
    CStMmdbNode(void);
    // destructor
    ~CStMmdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStMmdbNode(const CStMmdbNode& value);
    CStMmdbNode& operator=(const CStMmdbNode& value);

};



/////////////////// CStMmdbNode inline methods

// constructor
inline
CStMmdbNode::CStMmdbNode(void)
{
}


/////////////////// end of CStMmdbNode inline methods


class CStMmdb : public CStMmdb_Base
{
    typedef CStMmdb_Base Tparent;
public:
    // constructor
    CStMmdb(void);
    // destructor
    ~CStMmdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStMmdb(const CStMmdb& value);
    CStMmdb& operator=(const CStMmdb& value);

};



/////////////////// CStMmdb inline methods

// constructor
inline
CStMmdb::CStMmdb(void)
{
}


/////////////////// end of CStMmdb inline methods


class CStLLdbNode : public CStLLdbNode_Base
{
    typedef CStLLdbNode_Base Tparent;
public:
    // constructor
    CStLLdbNode(void);
    // destructor
    ~CStLLdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStLLdbNode(const CStLLdbNode& value);
    CStLLdbNode& operator=(const CStLLdbNode& value);

};



/////////////////// CStLLdbNode inline methods

// constructor
inline
CStLLdbNode::CStLLdbNode(void)
{
}


/////////////////// end of CStLLdbNode inline methods


class CStLLdb : public CStLLdb_Base
{
    typedef CStLLdb_Base Tparent;
public:
    // constructor
    CStLLdb(void);
    // destructor
    ~CStLLdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStLLdb(const CStLLdb& value);
    CStLLdb& operator=(const CStLLdb& value);

};



/////////////////// CStLLdb inline methods

// constructor
inline
CStLLdb::CStLLdb(void)
{
}


/////////////////// end of CStLLdb inline methods


class CStHistdbNode : public CStHistdbNode_Base
{
    typedef CStHistdbNode_Base Tparent;
public:
    // constructor
    CStHistdbNode(void);
    // destructor
    ~CStHistdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStHistdbNode(const CStHistdbNode& value);
    CStHistdbNode& operator=(const CStHistdbNode& value);

};



/////////////////// CStHistdbNode inline methods

// constructor
inline
CStHistdbNode::CStHistdbNode(void)
{
}


/////////////////// end of CStHistdbNode inline methods


class CStHistdb : public CStHistdb_Base
{
    typedef CStHistdb_Base Tparent;
public:
    // constructor
    CStHistdb(void);
    // destructor
    ~CStHistdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStHistdb(const CStHistdb& value);
    CStHistdb& operator=(const CStHistdb& value);

};



/////////////////// CStHistdb inline methods

// constructor
inline
CStHistdb::CStHistdb(void)
{
}


/////////////////// end of CStHistdb inline methods


class CStGOdbNode : public CStGOdbNode_Base
{
    typedef CStGOdbNode_Base Tparent;
public:
    // constructor
    CStGOdbNode(void);
    // destructor
    ~CStGOdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStGOdbNode(const CStGOdbNode& value);
    CStGOdbNode& operator=(const CStGOdbNode& value);

};



/////////////////// CStGOdbNode inline methods

// constructor
inline
CStGOdbNode::CStGOdbNode(void)
{
}


/////////////////// end of CStGOdbNode inline methods


class CStGOdb : public CStGOdb_Base
{
    typedef CStGOdb_Base Tparent;
public:
    // constructor
    CStGOdb(void);
    // destructor
    ~CStGOdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStGOdb(const CStGOdb& value);
    CStGOdb& operator=(const CStGOdb& value);

};



/////////////////// CStGOdb inline methods

// constructor
inline
CStGOdb::CStGOdb(void)
{
}


/////////////////// end of CStGOdb inline methods


class CStDomdbNode : public CStDomdbNode_Base
{
    typedef CStDomdbNode_Base Tparent;
public:
    // constructor
    CStDomdbNode(void);
    // destructor
    ~CStDomdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStDomdbNode(const CStDomdbNode& value);
    CStDomdbNode& operator=(const CStDomdbNode& value);

};



/////////////////// CStDomdbNode inline methods

// constructor
inline
CStDomdbNode::CStDomdbNode(void)
{
}


/////////////////// end of CStDomdbNode inline methods


class CStDomdb : public CStDomdb_Base
{
    typedef CStDomdb_Base Tparent;
public:
    // constructor
    CStDomdb(void);
    // destructor
    ~CStDomdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStDomdb(const CStDomdb& value);
    CStDomdb& operator=(const CStDomdb& value);

};



/////////////////// CStDomdb inline methods

// constructor
inline
CStDomdb::CStDomdb(void)
{
}


/////////////////// end of CStDomdb inline methods


class CStDomNamedb : public CStDomNamedb_Base
{
    typedef CStDomNamedb_Base Tparent;
public:
    // constructor
    CStDomNamedb(void);
    // destructor
    ~CStDomNamedb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStDomNamedb(const CStDomNamedb& value);
    CStDomNamedb& operator=(const CStDomNamedb& value);

};



/////////////////// CStDomNamedb inline methods

// constructor
inline
CStDomNamedb::CStDomNamedb(void)
{
}


/////////////////// end of CStDomNamedb inline methods


class CStDomNameNode : public CStDomNameNode_Base
{
    typedef CStDomNameNode_Base Tparent;
public:
    // constructor
    CStDomNameNode(void);
    // destructor
    ~CStDomNameNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStDomNameNode(const CStDomNameNode& value);
    CStDomNameNode& operator=(const CStDomNameNode& value);

};



/////////////////// CStDomNameNode inline methods

// constructor
inline
CStDomNameNode::CStDomNameNode(void)
{
}


/////////////////// end of CStDomNameNode inline methods


class CStChromNode : public CStChromNode_Base
{
    typedef CStChromNode_Base Tparent;
public:
    // constructor
    CStChromNode(void);
    // destructor
    ~CStChromNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStChromNode(const CStChromNode& value);
    CStChromNode& operator=(const CStChromNode& value);

};



/////////////////// CStChromNode inline methods

// constructor
inline
CStChromNode::CStChromNode(void)
{
}


/////////////////// end of CStChromNode inline methods


class CStChrom : public CStChrom_Base
{
    typedef CStChrom_Base Tparent;
public:
    // constructor
    CStChrom(void);
    // destructor
    ~CStChrom(void);

private:
    // Prohibit copy constructor and assignment operator
    CStChrom(const CStChrom& value);
    CStChrom& operator=(const CStChrom& value);

};



/////////////////// CStChrom inline methods

// constructor
inline
CStChrom::CStChrom(void)
{
}


/////////////////// end of CStChrom inline methods


class CStCddbNode : public CStCddbNode_Base
{
    typedef CStCddbNode_Base Tparent;
public:
    // constructor
    CStCddbNode(void);
    // destructor
    ~CStCddbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStCddbNode(const CStCddbNode& value);
    CStCddbNode& operator=(const CStCddbNode& value);

};



/////////////////// CStCddbNode inline methods

// constructor
inline
CStCddbNode::CStCddbNode(void)
{
}


/////////////////// end of CStCddbNode inline methods


class CStCddb : public CStCddb_Base
{
    typedef CStCddb_Base Tparent;
public:
    // constructor
    CStCddb(void);
    // destructor
    ~CStCddb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStCddb(const CStCddb& value);
    CStCddb& operator=(const CStCddb& value);

};



/////////////////// CStCddb inline methods

// constructor
inline
CStCddb::CStCddb(void)
{
}


/////////////////// end of CStCddb inline methods


class CStCDDdbNode : public CStCDDdbNode_Base
{
    typedef CStCDDdbNode_Base Tparent;
public:
    // constructor
    CStCDDdbNode(void);
    // destructor
    ~CStCDDdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStCDDdbNode(const CStCDDdbNode& value);
    CStCDDdbNode& operator=(const CStCDDdbNode& value);

};



/////////////////// CStCDDdbNode inline methods

// constructor
inline
CStCDDdbNode::CStCDDdbNode(void)
{
}


/////////////////// end of CStCDDdbNode inline methods


class CStCDDdb : public CStCDDdb_Base
{
    typedef CStCDDdb_Base Tparent;
public:
    // constructor
    CStCDDdb(void);
    // destructor
    ~CStCDDdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStCDDdb(const CStCDDdb& value);
    CStCDDdb& operator=(const CStCDDdb& value);

};



/////////////////// CStCDDdb inline methods

// constructor
inline
CStCDDdb::CStCDDdb(void)
{
}


/////////////////// end of CStCDDdb inline methods


class CStAsndbNode : public CStAsndbNode_Base
{
    typedef CStAsndbNode_Base Tparent;
public:
    // constructor
    CStAsndbNode(void);
    // destructor
    ~CStAsndbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStAsndbNode(const CStAsndbNode& value);
    CStAsndbNode& operator=(const CStAsndbNode& value);

};



/////////////////// CStAsndbNode inline methods

// constructor
inline
CStAsndbNode::CStAsndbNode(void)
{
}


/////////////////// end of CStAsndbNode inline methods


class CStAsndb : public CStAsndb_Base
{
    typedef CStAsndb_Base Tparent;
public:
    // constructor
    CStAsndb(void);
    // destructor
    ~CStAsndb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStAsndb(const CStAsndb& value);
    CStAsndb& operator=(const CStAsndb& value);

};



/////////////////// CStAsndb inline methods

// constructor
inline
CStAsndb::CStAsndb(void)
{
}


/////////////////// end of CStAsndb inline methods


class CStAccdbNode : public CStAccdbNode_Base
{
    typedef CStAccdbNode_Base Tparent;
public:
    // constructor
    CStAccdbNode(void);
    // destructor
    ~CStAccdbNode(void);

private:
    // Prohibit copy constructor and assignment operator
    CStAccdbNode(const CStAccdbNode& value);
    CStAccdbNode& operator=(const CStAccdbNode& value);

};



/////////////////// CStAccdbNode inline methods

// constructor
inline
CStAccdbNode::CStAccdbNode(void)
{
}


/////////////////// end of CStAccdbNode inline methods


class CStAccdb : public CStAccdb_Base
{
    typedef CStAccdb_Base Tparent;
public:
    // constructor
    CStAccdb(void);
    // destructor
    ~CStAccdb(void);

private:
    // Prohibit copy constructor and assignment operator
    CStAccdb(const CStAccdb& value);
    CStAccdb& operator=(const CStAccdb& value);

};



/////////////////// CStAccdb inline methods

// constructor
inline
CStAccdb::CStAccdb(void)
{
}


/////////////////// end of CStAccdb inline methods


END_seqhound_SCOPE // namespace seqhound::


/*
* ===========================================================================
*
* $Log: slristruc.hpp,v $
* Revision 1.2  2003/09/29 22:18:49  haocl
* checkin after newly generated
*
*
* ===========================================================================
*/

#endif // SLRISTRUC_HPP
/* Original file checksum: lines: 1319, chars: 21525, CRC32: 6e410ef5 */
