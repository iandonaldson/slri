/* $Id: shproteinreport_.hpp,v 1.3 2003/09/29 22:18:49 haocl Exp $
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code is generated by application DATATOOL
 *   using specifications from the data definition file
 *   'slristruc.asn'.
 *
 * ATTENTION:
 *   Don't edit or check-in this file to the CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

#ifndef SHPROTEINREPORT_BASE_HPP
#define SHPROTEINREPORT_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>


// forward declarations
class CFLink_set;
#ifndef BEGIN_shoundcgi_SCOPE
#  define BEGIN_shoundcgi_SCOPE BEGIN_SCOPE(shoundcgi)
#  define END_shoundcgi_SCOPE END_SCOPE(shoundcgi)
#endif
BEGIN_shoundcgi_SCOPE // namespace shoundcgi::

class CSHGoAnnot;
class CSHGoAnnotNode;
class CSHGoReport;
class CSHLocusLinkReport;
class CSHLocusProduct;
class CSHProteinReport;
class CSHProteinReportSet;


// generated classes

class CSHProteinReportSetDescription_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHProteinReportSetDescription_Base(void);
    // destructor
    virtual ~CSHProteinReportSetDescription_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::string TTitle;
    typedef int TTotal_reports;
    typedef int TQuery;
    typedef CSHProteinReport TQuery_report;
    typedef NCBI_NS_STD::list< int > TRedundant_set;
    typedef CSHProteinReportSet TRedun_reports;
    typedef ::CFLink_set TNeighbour_set;
    typedef CSHProteinReport TBest_report;
    typedef CSHProteinReportSet TNeighbour_reports;
    typedef double TCutoff;
    typedef bool TAcc;
    typedef bool TDefline;
    typedef bool TDna;
    typedef bool TTaxid;
    typedef bool TOmim;
    typedef bool TMuid;
    typedef bool TPmid;
    typedef bool TMmdb_ids;
    typedef bool TGo;
    typedef bool TLlink;
    typedef bool TRedund;
    typedef bool TNeighbours;

    // members' getters
    // members' setters
    bool IsSetTitle(void) const;
    void ResetTitle(void);
    const NCBI_NS_STD::string& GetTitle(void) const;
    void SetTitle(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetTitle(void);

    void ResetTotal_reports(void);
    const int& GetTotal_reports(void) const;
    void SetTotal_reports(const int& value);
    int& SetTotal_reports(void);

    void ResetQuery(void);
    const int& GetQuery(void) const;
    void SetQuery(const int& value);
    int& SetQuery(void);

    bool IsSetQuery_report(void) const;
    void ResetQuery_report(void);
    const CSHProteinReport& GetQuery_report(void) const;
    void SetQuery_report(CSHProteinReport& value);
    CSHProteinReport& SetQuery_report(void);

    bool IsSetRedundant_set(void) const;
    void ResetRedundant_set(void);
    const NCBI_NS_STD::list< int >& GetRedundant_set(void) const;
    NCBI_NS_STD::list< int >& SetRedundant_set(void);

    bool IsSetRedun_reports(void) const;
    void ResetRedun_reports(void);
    const CSHProteinReportSet& GetRedun_reports(void) const;
    void SetRedun_reports(CSHProteinReportSet& value);
    CSHProteinReportSet& SetRedun_reports(void);

    bool IsSetNeighbour_set(void) const;
    void ResetNeighbour_set(void);
    const ::CFLink_set& GetNeighbour_set(void) const;
    void SetNeighbour_set(::CFLink_set& value);
    ::CFLink_set& SetNeighbour_set(void);

    bool IsSetBest_report(void) const;
    void ResetBest_report(void);
    const CSHProteinReport& GetBest_report(void) const;
    void SetBest_report(CSHProteinReport& value);
    CSHProteinReport& SetBest_report(void);

    bool IsSetNeighbour_reports(void) const;
    void ResetNeighbour_reports(void);
    const CSHProteinReportSet& GetNeighbour_reports(void) const;
    void SetNeighbour_reports(CSHProteinReportSet& value);
    CSHProteinReportSet& SetNeighbour_reports(void);

    bool IsSetCutoff(void) const;
    void ResetCutoff(void);
    const double& GetCutoff(void) const;
    void SetCutoff(const double& value);
    double& SetCutoff(void);

    void ResetAcc(void);
    const bool& GetAcc(void) const;
    void SetAcc(const bool& value);
    bool& SetAcc(void);

    void ResetDefline(void);
    const bool& GetDefline(void) const;
    void SetDefline(const bool& value);
    bool& SetDefline(void);

    void ResetDna(void);
    const bool& GetDna(void) const;
    void SetDna(const bool& value);
    bool& SetDna(void);

    void ResetTaxid(void);
    const bool& GetTaxid(void) const;
    void SetTaxid(const bool& value);
    bool& SetTaxid(void);

    void ResetOmim(void);
    const bool& GetOmim(void) const;
    void SetOmim(const bool& value);
    bool& SetOmim(void);

    void ResetMuid(void);
    const bool& GetMuid(void) const;
    void SetMuid(const bool& value);
    bool& SetMuid(void);

    void ResetPmid(void);
    const bool& GetPmid(void) const;
    void SetPmid(const bool& value);
    bool& SetPmid(void);

    void ResetMmdb_ids(void);
    const bool& GetMmdb_ids(void) const;
    void SetMmdb_ids(const bool& value);
    bool& SetMmdb_ids(void);

    void ResetGo(void);
    const bool& GetGo(void) const;
    void SetGo(const bool& value);
    bool& SetGo(void);

    void ResetLlink(void);
    const bool& GetLlink(void) const;
    void SetLlink(const bool& value);
    bool& SetLlink(void);

    void ResetRedund(void);
    const bool& GetRedund(void) const;
    void SetRedund(const bool& value);
    bool& SetRedund(void);

    void ResetNeighbours(void);
    const bool& GetNeighbours(void) const;
    void SetNeighbours(const bool& value);
    bool& SetNeighbours(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHProteinReportSetDescription_Base(const CSHProteinReportSetDescription_Base&);
    CSHProteinReportSetDescription_Base& operator=(const CSHProteinReportSetDescription_Base&);

    // members' data
    bool m_set_Title;
    bool m_set_Cutoff;
    TTitle m_Title;
    TTotal_reports m_Total_reports;
    TQuery m_Query;
    NCBI_NS_NCBI::CRef< TQuery_report > m_Query_report;
    TRedundant_set m_Redundant_set;
    NCBI_NS_NCBI::CRef< TRedun_reports > m_Redun_reports;
    NCBI_NS_NCBI::CRef< TNeighbour_set > m_Neighbour_set;
    NCBI_NS_NCBI::CRef< TBest_report > m_Best_report;
    NCBI_NS_NCBI::CRef< TNeighbour_reports > m_Neighbour_reports;
    TCutoff m_Cutoff;
    TAcc m_Acc;
    TDefline m_Defline;
    TDna m_Dna;
    TTaxid m_Taxid;
    TOmim m_Omim;
    TMuid m_Muid;
    TPmid m_Pmid;
    TMmdb_ids m_Mmdb_ids;
    TGo m_Go;
    TLlink m_Llink;
    TRedund m_Redund;
    TNeighbours m_Neighbours;
};
class CSHProteinReportSet_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHProteinReportSet_Base(void);
    // destructor
    virtual ~CSHProteinReportSet_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TNumber;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHProteinReport > > TReports;

    // members' getters
    // members' setters
    void ResetNumber(void);
    const int& GetNumber(void) const;
    void SetNumber(const int& value);
    int& SetNumber(void);

    void ResetReports(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHProteinReport > >& GetReports(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHProteinReport > >& SetReports(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHProteinReportSet_Base(const CSHProteinReportSet_Base&);
    CSHProteinReportSet_Base& operator=(const CSHProteinReportSet_Base&);

    // members' data
    TNumber m_Number;
    TReports m_Reports;
};
class CSHProteinReport_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHProteinReport_Base(void);
    // destructor
    virtual ~CSHProteinReport_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef NCBI_NS_STD::string TAcc;
    typedef NCBI_NS_STD::string TDefline;
    typedef int TDna;
    typedef NCBI_NS_STD::list< int > TMuids;
    typedef NCBI_NS_STD::list< int > TPmids;
    typedef int TMmdbid;
    typedef int TTaxid;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoReport > > TGo;
    typedef NCBI_NS_STD::list< int > TOmim;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHLocusLinkReport > > TLlink;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    bool IsSetAcc(void) const;
    void ResetAcc(void);
    const NCBI_NS_STD::string& GetAcc(void) const;
    void SetAcc(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetAcc(void);

    bool IsSetDefline(void) const;
    void ResetDefline(void);
    const NCBI_NS_STD::string& GetDefline(void) const;
    void SetDefline(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetDefline(void);

    bool IsSetDna(void) const;
    void ResetDna(void);
    const int& GetDna(void) const;
    void SetDna(const int& value);
    int& SetDna(void);

    bool IsSetMuids(void) const;
    void ResetMuids(void);
    const NCBI_NS_STD::list< int >& GetMuids(void) const;
    NCBI_NS_STD::list< int >& SetMuids(void);

    bool IsSetPmids(void) const;
    void ResetPmids(void);
    const NCBI_NS_STD::list< int >& GetPmids(void) const;
    NCBI_NS_STD::list< int >& SetPmids(void);

    bool IsSetMmdbid(void) const;
    void ResetMmdbid(void);
    const int& GetMmdbid(void) const;
    void SetMmdbid(const int& value);
    int& SetMmdbid(void);

    bool IsSetTaxid(void) const;
    void ResetTaxid(void);
    const int& GetTaxid(void) const;
    void SetTaxid(const int& value);
    int& SetTaxid(void);

    bool IsSetGo(void) const;
    void ResetGo(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoReport > >& GetGo(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoReport > >& SetGo(void);

    bool IsSetOmim(void) const;
    void ResetOmim(void);
    const NCBI_NS_STD::list< int >& GetOmim(void) const;
    NCBI_NS_STD::list< int >& SetOmim(void);

    bool IsSetLlink(void) const;
    void ResetLlink(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHLocusLinkReport > >& GetLlink(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHLocusLinkReport > >& SetLlink(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHProteinReport_Base(const CSHProteinReport_Base&);
    CSHProteinReport_Base& operator=(const CSHProteinReport_Base&);

    // members' data
    bool m_set_Acc;
    bool m_set_Defline;
    bool m_set_Dna;
    bool m_set_Mmdbid;
    bool m_set_Taxid;
    TGi m_Gi;
    TAcc m_Acc;
    TDefline m_Defline;
    TDna m_Dna;
    TMuids m_Muids;
    TPmids m_Pmids;
    TMmdbid m_Mmdbid;
    TTaxid m_Taxid;
    TGo m_Go;
    TOmim m_Omim;
    TLlink m_Llink;
};
class CSHNeighbour_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHNeighbour_Base(void);
    // destructor
    virtual ~CSHNeighbour_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef double TEvalue;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    void ResetEvalue(void);
    const double& GetEvalue(void) const;
    void SetEvalue(const double& value);
    double& SetEvalue(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHNeighbour_Base(const CSHNeighbour_Base&);
    CSHNeighbour_Base& operator=(const CSHNeighbour_Base&);

    // members' data
    TGi m_Gi;
    TEvalue m_Evalue;
};
class CSHLocusProduct_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHLocusProduct_Base(void);
    // destructor
    virtual ~CSHLocusProduct_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGi;
    typedef NCBI_NS_STD::string TDefline;

    // members' getters
    // members' setters
    void ResetGi(void);
    const int& GetGi(void) const;
    void SetGi(const int& value);
    int& SetGi(void);

    bool IsSetDefline(void) const;
    void ResetDefline(void);
    const NCBI_NS_STD::string& GetDefline(void) const;
    void SetDefline(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetDefline(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHLocusProduct_Base(const CSHLocusProduct_Base&);
    CSHLocusProduct_Base& operator=(const CSHLocusProduct_Base&);

    // members' data
    bool m_set_Defline;
    TGi m_Gi;
    TDefline m_Defline;
};
class CSHLocusLinkReport_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHLocusLinkReport_Base(void);
    // destructor
    virtual ~CSHLocusLinkReport_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TLlid;
    typedef NCBI_NS_STD::string TLocus;
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHLocusProduct > > TProducts;

    // members' getters
    // members' setters
    bool IsSetLlid(void) const;
    void ResetLlid(void);
    const int& GetLlid(void) const;
    void SetLlid(const int& value);
    int& SetLlid(void);

    bool IsSetLocus(void) const;
    void ResetLocus(void);
    const NCBI_NS_STD::string& GetLocus(void) const;
    void SetLocus(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetLocus(void);

    bool IsSetProducts(void) const;
    void ResetProducts(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHLocusProduct > >& GetProducts(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHLocusProduct > >& SetProducts(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHLocusLinkReport_Base(const CSHLocusLinkReport_Base&);
    CSHLocusLinkReport_Base& operator=(const CSHLocusLinkReport_Base&);

    // members' data
    bool m_set_Llid;
    bool m_set_Locus;
    TLlid m_Llid;
    TLocus m_Locus;
    TProducts m_Products;
};
class CSHGoReport_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHGoReport_Base(void);
    // destructor
    virtual ~CSHGoReport_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TNum_mol_fun;
    typedef int TNum_bio_pro;
    typedef int TNum_cell_com;
    typedef CSHGoAnnot TMol_fun;
    typedef CSHGoAnnot TBio_pro;
    typedef CSHGoAnnot TCell_com;

    // members' getters
    // members' setters
    void ResetNum_mol_fun(void);
    const int& GetNum_mol_fun(void) const;
    void SetNum_mol_fun(const int& value);
    int& SetNum_mol_fun(void);

    void ResetNum_bio_pro(void);
    const int& GetNum_bio_pro(void) const;
    void SetNum_bio_pro(const int& value);
    int& SetNum_bio_pro(void);

    void ResetNum_cell_com(void);
    const int& GetNum_cell_com(void) const;
    void SetNum_cell_com(const int& value);
    int& SetNum_cell_com(void);

    bool IsSetMol_fun(void) const;
    void ResetMol_fun(void);
    const CSHGoAnnot& GetMol_fun(void) const;
    void SetMol_fun(CSHGoAnnot& value);
    CSHGoAnnot& SetMol_fun(void);

    bool IsSetBio_pro(void) const;
    void ResetBio_pro(void);
    const CSHGoAnnot& GetBio_pro(void) const;
    void SetBio_pro(CSHGoAnnot& value);
    CSHGoAnnot& SetBio_pro(void);

    bool IsSetCell_com(void) const;
    void ResetCell_com(void);
    const CSHGoAnnot& GetCell_com(void) const;
    void SetCell_com(CSHGoAnnot& value);
    CSHGoAnnot& SetCell_com(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHGoReport_Base(const CSHGoReport_Base&);
    CSHGoReport_Base& operator=(const CSHGoReport_Base&);

    // members' data
    TNum_mol_fun m_Num_mol_fun;
    TNum_bio_pro m_Num_bio_pro;
    TNum_cell_com m_Num_cell_com;
    NCBI_NS_NCBI::CRef< TMol_fun > m_Mol_fun;
    NCBI_NS_NCBI::CRef< TBio_pro > m_Bio_pro;
    NCBI_NS_NCBI::CRef< TCell_com > m_Cell_com;
};
class CSHGoAnnotNode_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHGoAnnotNode_Base(void);
    // destructor
    virtual ~CSHGoAnnotNode_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef int TGoid;
    typedef NCBI_NS_STD::string TOntology;
    typedef NCBI_NS_STD::string TGoname;
    typedef NCBI_NS_STD::list< NCBI_NS_STD::string > TEvidence_code;
    typedef NCBI_NS_STD::list< int > TPmid;

    // members' getters
    // members' setters
    void ResetGoid(void);
    const int& GetGoid(void) const;
    void SetGoid(const int& value);
    int& SetGoid(void);

    void ResetOntology(void);
    const NCBI_NS_STD::string& GetOntology(void) const;
    void SetOntology(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetOntology(void);

    void ResetGoname(void);
    const NCBI_NS_STD::string& GetGoname(void) const;
    void SetGoname(const NCBI_NS_STD::string& value);
    NCBI_NS_STD::string& SetGoname(void);

    void ResetEvidence_code(void);
    const NCBI_NS_STD::list< NCBI_NS_STD::string >& GetEvidence_code(void) const;
    NCBI_NS_STD::list< NCBI_NS_STD::string >& SetEvidence_code(void);

    void ResetPmid(void);
    const NCBI_NS_STD::list< int >& GetPmid(void) const;
    NCBI_NS_STD::list< int >& SetPmid(void);

    // reset whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CSHGoAnnotNode_Base(const CSHGoAnnotNode_Base&);
    CSHGoAnnotNode_Base& operator=(const CSHGoAnnotNode_Base&);

    // members' data
    TGoid m_Goid;
    TOntology m_Ontology;
    TGoname m_Goname;
    TEvidence_code m_Evidence_code;
    TPmid m_Pmid;
};
class CSHGoAnnot_Base : public NCBI_NS_NCBI::CSerialObject
{
    typedef NCBI_NS_NCBI::CSerialObject Tparent;
public:
    // constructor
    CSHGoAnnot_Base(void);
    // destructor
    virtual ~CSHGoAnnot_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // members' types
    typedef NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoAnnotNode > > Tdata;

    // members' getters
    // members' setters
    void Reset(void);
    const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoAnnotNode > >& Get(void) const;
    NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoAnnotNode > >& Set(void);
    operator const NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoAnnotNode > >& (void) const;
    operator NCBI_NS_STD::list< NCBI_NS_NCBI::CRef< CSHGoAnnotNode > >& (void);

    // reset whole object
    
private:
    // Prohibit copy constructor and assignment operator
    CSHGoAnnot_Base(const CSHGoAnnot_Base&);
    CSHGoAnnot_Base& operator=(const CSHGoAnnot_Base&);

    // members' data
    Tdata m_data;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CSHProteinReportSetDescription_Base::IsSetTitle(void) const
{
    return m_set_Title;
}

inline
const CSHProteinReportSetDescription_Base::TTitle& CSHProteinReportSetDescription_Base::GetTitle(void) const
{
    return m_Title;
}

inline
void CSHProteinReportSetDescription_Base::SetTitle(const TTitle& value)
{
    m_Title = value;
    m_set_Title = true;
}

inline
CSHProteinReportSetDescription_Base::TTitle& CSHProteinReportSetDescription_Base::SetTitle(void)
{
    m_set_Title = true;
    return m_Title;
}

inline
void CSHProteinReportSetDescription_Base::ResetTotal_reports(void)
{
    m_Total_reports = 0;
}

inline
const CSHProteinReportSetDescription_Base::TTotal_reports& CSHProteinReportSetDescription_Base::GetTotal_reports(void) const
{
    return m_Total_reports;
}

inline
void CSHProteinReportSetDescription_Base::SetTotal_reports(const TTotal_reports& value)
{
    m_Total_reports = value;
}

inline
CSHProteinReportSetDescription_Base::TTotal_reports& CSHProteinReportSetDescription_Base::SetTotal_reports(void)
{
    return m_Total_reports;
}

inline
void CSHProteinReportSetDescription_Base::ResetQuery(void)
{
    m_Query = 0;
}

inline
const CSHProteinReportSetDescription_Base::TQuery& CSHProteinReportSetDescription_Base::GetQuery(void) const
{
    return m_Query;
}

inline
void CSHProteinReportSetDescription_Base::SetQuery(const TQuery& value)
{
    m_Query = value;
}

inline
CSHProteinReportSetDescription_Base::TQuery& CSHProteinReportSetDescription_Base::SetQuery(void)
{
    return m_Query;
}

inline
bool CSHProteinReportSetDescription_Base::IsSetQuery_report(void) const
{
    return m_Query_report;
}

inline
bool CSHProteinReportSetDescription_Base::IsSetRedundant_set(void) const
{
    return !(m_Redundant_set).empty();
}

inline
const CSHProteinReportSetDescription_Base::TRedundant_set& CSHProteinReportSetDescription_Base::GetRedundant_set(void) const
{
    return m_Redundant_set;
}

inline
CSHProteinReportSetDescription_Base::TRedundant_set& CSHProteinReportSetDescription_Base::SetRedundant_set(void)
{
    return m_Redundant_set;
}

inline
bool CSHProteinReportSetDescription_Base::IsSetRedun_reports(void) const
{
    return m_Redun_reports;
}

inline
bool CSHProteinReportSetDescription_Base::IsSetNeighbour_set(void) const
{
    return m_Neighbour_set;
}

inline
bool CSHProteinReportSetDescription_Base::IsSetBest_report(void) const
{
    return m_Best_report;
}

inline
bool CSHProteinReportSetDescription_Base::IsSetNeighbour_reports(void) const
{
    return m_Neighbour_reports;
}

inline
bool CSHProteinReportSetDescription_Base::IsSetCutoff(void) const
{
    return m_set_Cutoff;
}

inline
void CSHProteinReportSetDescription_Base::ResetCutoff(void)
{
    m_Cutoff = 0;
    m_set_Cutoff = false;
}

inline
const CSHProteinReportSetDescription_Base::TCutoff& CSHProteinReportSetDescription_Base::GetCutoff(void) const
{
    return m_Cutoff;
}

inline
void CSHProteinReportSetDescription_Base::SetCutoff(const TCutoff& value)
{
    m_Cutoff = value;
    m_set_Cutoff = true;
}

inline
CSHProteinReportSetDescription_Base::TCutoff& CSHProteinReportSetDescription_Base::SetCutoff(void)
{
    m_set_Cutoff = true;
    return m_Cutoff;
}

inline
void CSHProteinReportSetDescription_Base::ResetAcc(void)
{
    m_Acc = 0;
}

inline
const CSHProteinReportSetDescription_Base::TAcc& CSHProteinReportSetDescription_Base::GetAcc(void) const
{
    return m_Acc;
}

inline
void CSHProteinReportSetDescription_Base::SetAcc(const TAcc& value)
{
    m_Acc = value;
}

inline
CSHProteinReportSetDescription_Base::TAcc& CSHProteinReportSetDescription_Base::SetAcc(void)
{
    return m_Acc;
}

inline
void CSHProteinReportSetDescription_Base::ResetDefline(void)
{
    m_Defline = 0;
}

inline
const CSHProteinReportSetDescription_Base::TDefline& CSHProteinReportSetDescription_Base::GetDefline(void) const
{
    return m_Defline;
}

inline
void CSHProteinReportSetDescription_Base::SetDefline(const TDefline& value)
{
    m_Defline = value;
}

inline
CSHProteinReportSetDescription_Base::TDefline& CSHProteinReportSetDescription_Base::SetDefline(void)
{
    return m_Defline;
}

inline
void CSHProteinReportSetDescription_Base::ResetDna(void)
{
    m_Dna = 0;
}

inline
const CSHProteinReportSetDescription_Base::TDna& CSHProteinReportSetDescription_Base::GetDna(void) const
{
    return m_Dna;
}

inline
void CSHProteinReportSetDescription_Base::SetDna(const TDna& value)
{
    m_Dna = value;
}

inline
CSHProteinReportSetDescription_Base::TDna& CSHProteinReportSetDescription_Base::SetDna(void)
{
    return m_Dna;
}

inline
void CSHProteinReportSetDescription_Base::ResetTaxid(void)
{
    m_Taxid = 0;
}

inline
const CSHProteinReportSetDescription_Base::TTaxid& CSHProteinReportSetDescription_Base::GetTaxid(void) const
{
    return m_Taxid;
}

inline
void CSHProteinReportSetDescription_Base::SetTaxid(const TTaxid& value)
{
    m_Taxid = value;
}

inline
CSHProteinReportSetDescription_Base::TTaxid& CSHProteinReportSetDescription_Base::SetTaxid(void)
{
    return m_Taxid;
}

inline
void CSHProteinReportSetDescription_Base::ResetOmim(void)
{
    m_Omim = 0;
}

inline
const CSHProteinReportSetDescription_Base::TOmim& CSHProteinReportSetDescription_Base::GetOmim(void) const
{
    return m_Omim;
}

inline
void CSHProteinReportSetDescription_Base::SetOmim(const TOmim& value)
{
    m_Omim = value;
}

inline
CSHProteinReportSetDescription_Base::TOmim& CSHProteinReportSetDescription_Base::SetOmim(void)
{
    return m_Omim;
}

inline
void CSHProteinReportSetDescription_Base::ResetMuid(void)
{
    m_Muid = 0;
}

inline
const CSHProteinReportSetDescription_Base::TMuid& CSHProteinReportSetDescription_Base::GetMuid(void) const
{
    return m_Muid;
}

inline
void CSHProteinReportSetDescription_Base::SetMuid(const TMuid& value)
{
    m_Muid = value;
}

inline
CSHProteinReportSetDescription_Base::TMuid& CSHProteinReportSetDescription_Base::SetMuid(void)
{
    return m_Muid;
}

inline
void CSHProteinReportSetDescription_Base::ResetPmid(void)
{
    m_Pmid = 0;
}

inline
const CSHProteinReportSetDescription_Base::TPmid& CSHProteinReportSetDescription_Base::GetPmid(void) const
{
    return m_Pmid;
}

inline
void CSHProteinReportSetDescription_Base::SetPmid(const TPmid& value)
{
    m_Pmid = value;
}

inline
CSHProteinReportSetDescription_Base::TPmid& CSHProteinReportSetDescription_Base::SetPmid(void)
{
    return m_Pmid;
}

inline
void CSHProteinReportSetDescription_Base::ResetMmdb_ids(void)
{
    m_Mmdb_ids = 0;
}

inline
const CSHProteinReportSetDescription_Base::TMmdb_ids& CSHProteinReportSetDescription_Base::GetMmdb_ids(void) const
{
    return m_Mmdb_ids;
}

inline
void CSHProteinReportSetDescription_Base::SetMmdb_ids(const TMmdb_ids& value)
{
    m_Mmdb_ids = value;
}

inline
CSHProteinReportSetDescription_Base::TMmdb_ids& CSHProteinReportSetDescription_Base::SetMmdb_ids(void)
{
    return m_Mmdb_ids;
}

inline
void CSHProteinReportSetDescription_Base::ResetGo(void)
{
    m_Go = 0;
}

inline
const CSHProteinReportSetDescription_Base::TGo& CSHProteinReportSetDescription_Base::GetGo(void) const
{
    return m_Go;
}

inline
void CSHProteinReportSetDescription_Base::SetGo(const TGo& value)
{
    m_Go = value;
}

inline
CSHProteinReportSetDescription_Base::TGo& CSHProteinReportSetDescription_Base::SetGo(void)
{
    return m_Go;
}

inline
void CSHProteinReportSetDescription_Base::ResetLlink(void)
{
    m_Llink = 0;
}

inline
const CSHProteinReportSetDescription_Base::TLlink& CSHProteinReportSetDescription_Base::GetLlink(void) const
{
    return m_Llink;
}

inline
void CSHProteinReportSetDescription_Base::SetLlink(const TLlink& value)
{
    m_Llink = value;
}

inline
CSHProteinReportSetDescription_Base::TLlink& CSHProteinReportSetDescription_Base::SetLlink(void)
{
    return m_Llink;
}

inline
void CSHProteinReportSetDescription_Base::ResetRedund(void)
{
    m_Redund = 0;
}

inline
const CSHProteinReportSetDescription_Base::TRedund& CSHProteinReportSetDescription_Base::GetRedund(void) const
{
    return m_Redund;
}

inline
void CSHProteinReportSetDescription_Base::SetRedund(const TRedund& value)
{
    m_Redund = value;
}

inline
CSHProteinReportSetDescription_Base::TRedund& CSHProteinReportSetDescription_Base::SetRedund(void)
{
    return m_Redund;
}

inline
void CSHProteinReportSetDescription_Base::ResetNeighbours(void)
{
    m_Neighbours = 0;
}

inline
const CSHProteinReportSetDescription_Base::TNeighbours& CSHProteinReportSetDescription_Base::GetNeighbours(void) const
{
    return m_Neighbours;
}

inline
void CSHProteinReportSetDescription_Base::SetNeighbours(const TNeighbours& value)
{
    m_Neighbours = value;
}

inline
CSHProteinReportSetDescription_Base::TNeighbours& CSHProteinReportSetDescription_Base::SetNeighbours(void)
{
    return m_Neighbours;
}

inline
void CSHProteinReportSet_Base::ResetNumber(void)
{
    m_Number = 0;
}

inline
const CSHProteinReportSet_Base::TNumber& CSHProteinReportSet_Base::GetNumber(void) const
{
    return m_Number;
}

inline
void CSHProteinReportSet_Base::SetNumber(const TNumber& value)
{
    m_Number = value;
}

inline
CSHProteinReportSet_Base::TNumber& CSHProteinReportSet_Base::SetNumber(void)
{
    return m_Number;
}

inline
const CSHProteinReportSet_Base::TReports& CSHProteinReportSet_Base::GetReports(void) const
{
    return m_Reports;
}

inline
CSHProteinReportSet_Base::TReports& CSHProteinReportSet_Base::SetReports(void)
{
    return m_Reports;
}

inline
void CSHProteinReport_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CSHProteinReport_Base::TGi& CSHProteinReport_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CSHProteinReport_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CSHProteinReport_Base::TGi& CSHProteinReport_Base::SetGi(void)
{
    return m_Gi;
}

inline
bool CSHProteinReport_Base::IsSetAcc(void) const
{
    return m_set_Acc;
}

inline
const CSHProteinReport_Base::TAcc& CSHProteinReport_Base::GetAcc(void) const
{
    return m_Acc;
}

inline
void CSHProteinReport_Base::SetAcc(const TAcc& value)
{
    m_Acc = value;
    m_set_Acc = true;
}

inline
CSHProteinReport_Base::TAcc& CSHProteinReport_Base::SetAcc(void)
{
    m_set_Acc = true;
    return m_Acc;
}

inline
bool CSHProteinReport_Base::IsSetDefline(void) const
{
    return m_set_Defline;
}

inline
const CSHProteinReport_Base::TDefline& CSHProteinReport_Base::GetDefline(void) const
{
    return m_Defline;
}

inline
void CSHProteinReport_Base::SetDefline(const TDefline& value)
{
    m_Defline = value;
    m_set_Defline = true;
}

inline
CSHProteinReport_Base::TDefline& CSHProteinReport_Base::SetDefline(void)
{
    m_set_Defline = true;
    return m_Defline;
}

inline
bool CSHProteinReport_Base::IsSetDna(void) const
{
    return m_set_Dna;
}

inline
void CSHProteinReport_Base::ResetDna(void)
{
    m_Dna = 0;
    m_set_Dna = false;
}

inline
const CSHProteinReport_Base::TDna& CSHProteinReport_Base::GetDna(void) const
{
    return m_Dna;
}

inline
void CSHProteinReport_Base::SetDna(const TDna& value)
{
    m_Dna = value;
    m_set_Dna = true;
}

inline
CSHProteinReport_Base::TDna& CSHProteinReport_Base::SetDna(void)
{
    m_set_Dna = true;
    return m_Dna;
}

inline
bool CSHProteinReport_Base::IsSetMuids(void) const
{
    return !(m_Muids).empty();
}

inline
const CSHProteinReport_Base::TMuids& CSHProteinReport_Base::GetMuids(void) const
{
    return m_Muids;
}

inline
CSHProteinReport_Base::TMuids& CSHProteinReport_Base::SetMuids(void)
{
    return m_Muids;
}

inline
bool CSHProteinReport_Base::IsSetPmids(void) const
{
    return !(m_Pmids).empty();
}

inline
const CSHProteinReport_Base::TPmids& CSHProteinReport_Base::GetPmids(void) const
{
    return m_Pmids;
}

inline
CSHProteinReport_Base::TPmids& CSHProteinReport_Base::SetPmids(void)
{
    return m_Pmids;
}

inline
bool CSHProteinReport_Base::IsSetMmdbid(void) const
{
    return m_set_Mmdbid;
}

inline
void CSHProteinReport_Base::ResetMmdbid(void)
{
    m_Mmdbid = 0;
    m_set_Mmdbid = false;
}

inline
const CSHProteinReport_Base::TMmdbid& CSHProteinReport_Base::GetMmdbid(void) const
{
    return m_Mmdbid;
}

inline
void CSHProteinReport_Base::SetMmdbid(const TMmdbid& value)
{
    m_Mmdbid = value;
    m_set_Mmdbid = true;
}

inline
CSHProteinReport_Base::TMmdbid& CSHProteinReport_Base::SetMmdbid(void)
{
    m_set_Mmdbid = true;
    return m_Mmdbid;
}

inline
bool CSHProteinReport_Base::IsSetTaxid(void) const
{
    return m_set_Taxid;
}

inline
void CSHProteinReport_Base::ResetTaxid(void)
{
    m_Taxid = 0;
    m_set_Taxid = false;
}

inline
const CSHProteinReport_Base::TTaxid& CSHProteinReport_Base::GetTaxid(void) const
{
    return m_Taxid;
}

inline
void CSHProteinReport_Base::SetTaxid(const TTaxid& value)
{
    m_Taxid = value;
    m_set_Taxid = true;
}

inline
CSHProteinReport_Base::TTaxid& CSHProteinReport_Base::SetTaxid(void)
{
    m_set_Taxid = true;
    return m_Taxid;
}

inline
bool CSHProteinReport_Base::IsSetGo(void) const
{
    return !(m_Go).empty();
}

inline
const CSHProteinReport_Base::TGo& CSHProteinReport_Base::GetGo(void) const
{
    return m_Go;
}

inline
CSHProteinReport_Base::TGo& CSHProteinReport_Base::SetGo(void)
{
    return m_Go;
}

inline
bool CSHProteinReport_Base::IsSetOmim(void) const
{
    return !(m_Omim).empty();
}

inline
const CSHProteinReport_Base::TOmim& CSHProteinReport_Base::GetOmim(void) const
{
    return m_Omim;
}

inline
CSHProteinReport_Base::TOmim& CSHProteinReport_Base::SetOmim(void)
{
    return m_Omim;
}

inline
bool CSHProteinReport_Base::IsSetLlink(void) const
{
    return !(m_Llink).empty();
}

inline
const CSHProteinReport_Base::TLlink& CSHProteinReport_Base::GetLlink(void) const
{
    return m_Llink;
}

inline
CSHProteinReport_Base::TLlink& CSHProteinReport_Base::SetLlink(void)
{
    return m_Llink;
}

inline
void CSHNeighbour_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CSHNeighbour_Base::TGi& CSHNeighbour_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CSHNeighbour_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CSHNeighbour_Base::TGi& CSHNeighbour_Base::SetGi(void)
{
    return m_Gi;
}

inline
void CSHNeighbour_Base::ResetEvalue(void)
{
    m_Evalue = 0;
}

inline
const CSHNeighbour_Base::TEvalue& CSHNeighbour_Base::GetEvalue(void) const
{
    return m_Evalue;
}

inline
void CSHNeighbour_Base::SetEvalue(const TEvalue& value)
{
    m_Evalue = value;
}

inline
CSHNeighbour_Base::TEvalue& CSHNeighbour_Base::SetEvalue(void)
{
    return m_Evalue;
}

inline
void CSHLocusProduct_Base::ResetGi(void)
{
    m_Gi = 0;
}

inline
const CSHLocusProduct_Base::TGi& CSHLocusProduct_Base::GetGi(void) const
{
    return m_Gi;
}

inline
void CSHLocusProduct_Base::SetGi(const TGi& value)
{
    m_Gi = value;
}

inline
CSHLocusProduct_Base::TGi& CSHLocusProduct_Base::SetGi(void)
{
    return m_Gi;
}

inline
bool CSHLocusProduct_Base::IsSetDefline(void) const
{
    return m_set_Defline;
}

inline
const CSHLocusProduct_Base::TDefline& CSHLocusProduct_Base::GetDefline(void) const
{
    return m_Defline;
}

inline
void CSHLocusProduct_Base::SetDefline(const TDefline& value)
{
    m_Defline = value;
    m_set_Defline = true;
}

inline
CSHLocusProduct_Base::TDefline& CSHLocusProduct_Base::SetDefline(void)
{
    m_set_Defline = true;
    return m_Defline;
}

inline
bool CSHLocusLinkReport_Base::IsSetLlid(void) const
{
    return m_set_Llid;
}

inline
void CSHLocusLinkReport_Base::ResetLlid(void)
{
    m_Llid = 0;
    m_set_Llid = false;
}

inline
const CSHLocusLinkReport_Base::TLlid& CSHLocusLinkReport_Base::GetLlid(void) const
{
    return m_Llid;
}

inline
void CSHLocusLinkReport_Base::SetLlid(const TLlid& value)
{
    m_Llid = value;
    m_set_Llid = true;
}

inline
CSHLocusLinkReport_Base::TLlid& CSHLocusLinkReport_Base::SetLlid(void)
{
    m_set_Llid = true;
    return m_Llid;
}

inline
bool CSHLocusLinkReport_Base::IsSetLocus(void) const
{
    return m_set_Locus;
}

inline
const CSHLocusLinkReport_Base::TLocus& CSHLocusLinkReport_Base::GetLocus(void) const
{
    return m_Locus;
}

inline
void CSHLocusLinkReport_Base::SetLocus(const TLocus& value)
{
    m_Locus = value;
    m_set_Locus = true;
}

inline
CSHLocusLinkReport_Base::TLocus& CSHLocusLinkReport_Base::SetLocus(void)
{
    m_set_Locus = true;
    return m_Locus;
}

inline
bool CSHLocusLinkReport_Base::IsSetProducts(void) const
{
    return !(m_Products).empty();
}

inline
const CSHLocusLinkReport_Base::TProducts& CSHLocusLinkReport_Base::GetProducts(void) const
{
    return m_Products;
}

inline
CSHLocusLinkReport_Base::TProducts& CSHLocusLinkReport_Base::SetProducts(void)
{
    return m_Products;
}

inline
void CSHGoReport_Base::ResetNum_mol_fun(void)
{
    m_Num_mol_fun = 0;
}

inline
const CSHGoReport_Base::TNum_mol_fun& CSHGoReport_Base::GetNum_mol_fun(void) const
{
    return m_Num_mol_fun;
}

inline
void CSHGoReport_Base::SetNum_mol_fun(const TNum_mol_fun& value)
{
    m_Num_mol_fun = value;
}

inline
CSHGoReport_Base::TNum_mol_fun& CSHGoReport_Base::SetNum_mol_fun(void)
{
    return m_Num_mol_fun;
}

inline
void CSHGoReport_Base::ResetNum_bio_pro(void)
{
    m_Num_bio_pro = 0;
}

inline
const CSHGoReport_Base::TNum_bio_pro& CSHGoReport_Base::GetNum_bio_pro(void) const
{
    return m_Num_bio_pro;
}

inline
void CSHGoReport_Base::SetNum_bio_pro(const TNum_bio_pro& value)
{
    m_Num_bio_pro = value;
}

inline
CSHGoReport_Base::TNum_bio_pro& CSHGoReport_Base::SetNum_bio_pro(void)
{
    return m_Num_bio_pro;
}

inline
void CSHGoReport_Base::ResetNum_cell_com(void)
{
    m_Num_cell_com = 0;
}

inline
const CSHGoReport_Base::TNum_cell_com& CSHGoReport_Base::GetNum_cell_com(void) const
{
    return m_Num_cell_com;
}

inline
void CSHGoReport_Base::SetNum_cell_com(const TNum_cell_com& value)
{
    m_Num_cell_com = value;
}

inline
CSHGoReport_Base::TNum_cell_com& CSHGoReport_Base::SetNum_cell_com(void)
{
    return m_Num_cell_com;
}

inline
bool CSHGoReport_Base::IsSetMol_fun(void) const
{
    return m_Mol_fun;
}

inline
bool CSHGoReport_Base::IsSetBio_pro(void) const
{
    return m_Bio_pro;
}

inline
bool CSHGoReport_Base::IsSetCell_com(void) const
{
    return m_Cell_com;
}

inline
void CSHGoAnnotNode_Base::ResetGoid(void)
{
    m_Goid = 0;
}

inline
const CSHGoAnnotNode_Base::TGoid& CSHGoAnnotNode_Base::GetGoid(void) const
{
    return m_Goid;
}

inline
void CSHGoAnnotNode_Base::SetGoid(const TGoid& value)
{
    m_Goid = value;
}

inline
CSHGoAnnotNode_Base::TGoid& CSHGoAnnotNode_Base::SetGoid(void)
{
    return m_Goid;
}

inline
const CSHGoAnnotNode_Base::TOntology& CSHGoAnnotNode_Base::GetOntology(void) const
{
    return m_Ontology;
}

inline
void CSHGoAnnotNode_Base::SetOntology(const TOntology& value)
{
    m_Ontology = value;
}

inline
CSHGoAnnotNode_Base::TOntology& CSHGoAnnotNode_Base::SetOntology(void)
{
    return m_Ontology;
}

inline
const CSHGoAnnotNode_Base::TGoname& CSHGoAnnotNode_Base::GetGoname(void) const
{
    return m_Goname;
}

inline
void CSHGoAnnotNode_Base::SetGoname(const TGoname& value)
{
    m_Goname = value;
}

inline
CSHGoAnnotNode_Base::TGoname& CSHGoAnnotNode_Base::SetGoname(void)
{
    return m_Goname;
}

inline
const CSHGoAnnotNode_Base::TEvidence_code& CSHGoAnnotNode_Base::GetEvidence_code(void) const
{
    return m_Evidence_code;
}

inline
CSHGoAnnotNode_Base::TEvidence_code& CSHGoAnnotNode_Base::SetEvidence_code(void)
{
    return m_Evidence_code;
}

inline
const CSHGoAnnotNode_Base::TPmid& CSHGoAnnotNode_Base::GetPmid(void) const
{
    return m_Pmid;
}

inline
CSHGoAnnotNode_Base::TPmid& CSHGoAnnotNode_Base::SetPmid(void)
{
    return m_Pmid;
}

inline
const CSHGoAnnot_Base::Tdata& CSHGoAnnot_Base::Get(void) const
{
    return m_data;
}

inline
CSHGoAnnot_Base::Tdata& CSHGoAnnot_Base::Set(void)
{
    return m_data;
}

inline
CSHGoAnnot_Base::operator const CSHGoAnnot_Base::Tdata& (void) const
{
    return m_data;
}

inline
CSHGoAnnot_Base::operator CSHGoAnnot_Base::Tdata& (void)
{
    return m_data;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_shoundcgi_SCOPE // namespace shoundcgi::


#endif // SHPROTEINREPORT_BASE_HPP
